{"version":3,"sources":["store/selectors/user.js","store/types.js","utils/API.js","store/actions/user.js","components/Login/index.js","components/PrivateRoute/index.js","components/Register/index.js","components/UserTokens/index.js","components/UserNav/index.js","views/Admin/components/Navigation/index.js","views/Admin/components/UsersList/index.js","views/Admin/components/ViewUser/index.js","views/Admin/components/EditUser/index.js","views/Admin/components/PublicationsList/index.js","views/Admin/components/EditPublication/index.js","views/Admin/components/ViewPublication/index.js","views/Admin/components/ViewWithdrawls/index.js","views/Admin/index.js","views/Editor/components/Navigation/index.js","views/Editor/components/PapersList/index.js","views/Editor/components/ResearchersList/index.js","views/Editor/components/ReviewersList/index.js","views/Editor/components/SignupsList/index.js","views/Editor/components/ViewResearcher/index.js","views/Editor/components/ViewReviewer/index.js","views/Editor/components/ViewSignup/index.js","views/Editor/components/ViewPapersRes/index.js","views/Editor/components/ViewPapersRev/index.js","components/PaperStatus/index.js","views/Editor/components/PaperDetails/index.js","views/Editor/components/EditPaper/index.js","views/Editor/index.js","views/Researcher/components/Navigation/index.js","views/Researcher/components/ViewPapers/index.js","views/Researcher/components/ViewPaper/index.js","views/Researcher/components/EditPaper/index.js","views/Researcher/index.js","views/Reviewer/components/Navigation/index.js","views/Reviewer/index.js","views/Viewer/components/Navigation/index.js","views/Viewer/index.js","components/EvaluationMetrics/index.js","components/EditEvaluationMetric/index.js","components/ViewEvaluationMetric/index.js","components/App/index.js","store/reducers/user.js","store/reducers/index.js","store/index.js","index.js"],"names":["selectUser","state","user","type","selectType","email","selectEmail","firstName","selectFirstName","lastName","selectLastName","LOGIN","LOGOUT","API","axios","create","baseURL","withCredentials","getUser","dispatch","a","get","res","payload","data","first_name","last_name","login","Login","props","useSelector","useDispatch","useState","password","loginInfo","setLoginInfo","error","setError","useEffect","handleChange","e","name","value","to","location","from","pathname","className","Form","onSubmit","preventDefault","then","response","post","catch","errors","Field","Input","placeholder","content","join","onChange","Button","primary","PrivateRoute","children","rest","render","user_types","key","text","Register","passwordConfirmation","degrees","userData","setUserData","length","title","institution","received","handleDegreeChange","names","split","field","index","parseInt","isNaN","map","deg","i","Select","options","degree","Group","animated","onClick","filter","Content","hidden","visible","concat","UserTokens","tokens","setTokens","tokenName","setTokenName","fetch","setFetch","newToken","setNewToken","newTokenName","setNewTokenName","err","console","log","Table","compact","celled","Header","Row","HeaderCell","Body","token","Cell","last_used_at","icon","labelPosition","tokenId","id","success","color","Icon","Divider","size","inline","Card","fluid","Meta","Description","extra","UserNav","Menu","Item","as","NavLink","position","Dropdown","item","exact","AdminNavigation","url","UserList","users","setUsers","open","setOpen","currentDelete","setCurrentDelete","Container","Segment","clearing","vertical","floated","Link","status","textAlign","secondary","Modal","basic","onClose","onOpen","dimmer","Actions","inverted","ViewUser","useParams","fetchDegrees","setFetchDegrees","setUser","setDegrees","dividing","definition","admin_email","Loader","active","user_statuses","degree_template","user_template","EditUser","history","useHistory","changed","setChanged","newDegree","setNewDegree","degreeError","setDegreeError","setDegree","newUser","new_user","saveField","Object","keys","reduce","acc","current","replace","disabled","pointing","circular","link","verticalAlign","degree_id","d","PublicationsList","fetchPublications","setFetchPublications","journals","setJournals","noEdit","journal","published_date","status_types","EditPublication","papers","setJournal","addPaper","setAddPaper","fetchPapers","setFetchPapers","setPapers","viewPaper","setViewPaper","paper","setPaper","admins","setAdmins","editors","setEditors","fetchUsers","setFetchUsers","newJournal","addPaperToJournal","paper_id","removePaperFromJournal","new_journal","placeholde","editor_email","researcher","editor","em_name","scrolling","undefined","find","p","padded","Subheader","researcher_email","Embed","defaultActive","file_path","ViewPublication","admin","ViewWithdrawls","withdrawPaper","approved","withdrawal_status","Message","Admin","useRouteMatch","path","EditorNavigation","PapersList","tertiary","ResearchersList","ReviewersList","SignupsList","firstname","ViewResearcher","ViewReviewer","ViewSignup","ViewPapersRes","ViewPapersRev","assigneds","setAssigneds","assign","setAssign","viewAssign","setViewAssign","revision_deadline","PaperStatus","edit","Step","Title","PaperDetails","assigned","setAssigned","nominated","setNominated","evaluationMetric","questions","metric","question","answer_type","reviewer","reviewer_email","EditPaper","fetchPaper","setFetchPaper","deleteRevDetails","setDeleteRevDetails","reviewers","setReviewers","removeNomi","setRemoveNomi","removeAssigned","setRemoveAssigned","action","setAction","openConfirmation","setOpenConfirmation","setEvaluationMetric","setWithdrawn","fetchReviewers","setFetchReviewers","nominateReviewer","setNominateReviewer","setReviewer","nominee","assinee","reviewer_id","withdraw","evaluation_metric","nomi","approveNomiRev","respomse","user_id","search","deleteRev","Editor","ResearcherNavigation","ViewPapers","minor_rev_deadline","major_rev_deadline","ViewPaper","setWithdraw","reviews","setReviews","answer","sent","review","metric_id","question_id","TextArea","cols","editPaperFile","setEditPaperFile","newFile","setNewFile","withdrawn","newPaper","formData","FormData","append","new_file_path","file","requestWidthrawal","target","files","n","removeNominee","Researcher","ReviewerNavigation","Reviewer","ViewerNavigation","Viewer","EvaluationMetrics","evaluationMetrics","setEvaluationMetrics","evaluation_metrics","em","questionTypes","EditEvaluationMetric","metrics","setMetrics","newCounter","setNewCounter","newEM","newQuestion","handleQuestionChange","ViewEvaluationMetric","App","component","attached","initialState","userReducer","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f0e5afa.chunk.js","sourcesContent":["export const selectFirstName = state =>state.user.firstName;\nexport const selectLastName = state =>state.user.lastName;\nexport const selectType = state =>state.user.type;\nexport const selectEmail = state =>state.user.email;\n\nexport const selectUser = state => selectType(state) && \n        selectEmail(state) && \n        selectFirstName(state) &&\n        selectLastName(state ) ? state.user : null;","export const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT'","import axios from \"axios\";\n\nconst API = axios.create({\n    baseURL: \"http://localhost\",\n    withCredentials: true,\n});\n\nexport default API;","import { LOGIN, LOGOUT } from '../types';\nimport API from \"../../utils/API\";\n\nexport const getUser = () => async dispatch => {\n    try{\n        const res = await API.get(`/api/user`)\n        dispatch( {\n            type: LOGIN,\n            payload: {\n                email: res.data.user.email,\n                firstName: res.data.user.first_name,\n                lastName: res.data.user.last_name,\n                type: res.data.user.type,\n            }\n        })\n    }\n    catch(e){\n        dispatch( {\n            type: LOGOUT\n        })\n    }\n}\n\nexport const login = (user) => ({\n    type:LOGIN,\n    payload: user\n});\n\nexport const logout = (user) => ({\n    type:LOGOUT\n});","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getUser, login } from \"../../store/actions/user\";\nimport { selectUser } from \"../../store/selectors/user\";\nimport { Redirect } from \"react-router-dom\";\nimport API from \"../../utils/API\";\n\nimport { Form } from 'semantic-ui-react';\n\nimport './index.css';\n\nconst Login = (props) => {\n\n    const user = useSelector(selectUser);\n\tconst dispatch = useDispatch();\n\t\n\tconst [ loginInfo, setLoginInfo ] = useState({\n\t\temail:'',\n\t\tpassword:'',\n\t});\n\n\tconst [ error, setError ] = useState({});\n\t\n\tuseEffect(() => {\n\t\tdispatch(getUser());\n\t})\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tAPI.get('/sanctum/csrf-cookie').then(response => {\n\t\t\tAPI.post('/login', loginInfo ).then(res=>{\n\t\t\t\tif ( res.data && res.data.user ) {\n\t\t\t\t\tdispatch(login({\n\t\t\t\t\t\temail: res.data.user.email,\n\t\t\t\t\t\tfirstName: res.data.user.first_name,\n\t\t\t\t\t\tlastName: res.data.user.last_name,\n\t\t\t\t\t\ttype: res.data.user.type,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}).catch(e=>{\n\t\t\t\tif(e.response?.data?.errors)\n\t\t\t\t\tsetError(e.response.data.errors)\n\t\t\t})\n\t\t});\n\t}\n\n\tconst handleChange = (e, {name, value}) => {\n\t    setLoginInfo( loginInfo => ({\n\t\t\t...loginInfo,\n\t\t\t[name]: value\n\t\t}));\n\t}\n\n\tif (user !== null)\n\t\treturn <Redirect to={props?.location?.state?.from?.pathname? \n\t\t\t\t\t\t\tprops.location.state.from.pathname : `/${user.type}`} />\n\n    return (\n       <div className=\"login\">\n       <div className=\"ui container middle\">\n            <Form onSubmit={handleSubmit}>\n                <Form.Field>\n                    <label>Email</label>\n                    <Form.Input placeholder='Email' \n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\tvalue={loginInfo.email}\n\t\t\t\t\t\t\t\terror={ error && error.email && \n                                    { content: error.email.join(' & ') }}\n                            \tonChange={handleChange}/>\n                </Form.Field>\n                <Form.Field>\n                    <label>Password</label>\n\t\t\t\t\t<Form.Input placeholder='Password' \n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tvalue={loginInfo.password}\n\t\t\t\t\t\t\t\terror={ error && error.password && \n                                    { content: error.password.join(' & ') }}\n                            \tonChange={handleChange}/>\n                </Form.Field>\n                <Form.Button type='submit' primary>Submit</Form.Button>\n            </Form>\n        </div>\n        </div>\n    );  \n};\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\"\nimport { Route, \n\t\t Redirect } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { getUser } from \"../../store/actions/user\";\nimport { selectUser } from \"../../store/selectors/user\";\nimport './index.css';\nconst PrivateRoute = ({ children, type = 'any', ...rest}) => {\n\n\tconst user = useSelector(selectUser);\n\tconst dispatch = useDispatch();\n\n    useEffect(() => {\n\t\tdispatch(getUser());\n\t},[dispatch]);\n\n\treturn (\n\t\t<Route\n\t\t  {...rest}\n\t\t  render={({ location }) =>\n\t\t\ttype !== 'any' && user && user.type !== type ? \n\t\t\t<Redirect to={`/${user.type}`} />\n\t\t\t: user ? (\n\t\t\t  children\n\t\t\t) : (\n\t\t\t  <Redirect\n\t\t\t\tto={{\n\t\t\t\t  pathname: \"/login\",\n\t\t\t\t  state: { from: location }\n\t\t\t\t}}\n\t\t\t  />\n\t\t\t)\n\t\t  }\n\t\t/>\n\t);\n};\n\nexport default PrivateRoute;\n","import React, {useState, useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getUser, login } from \"../../store/actions/user\";\nimport { selectUser } from \"../../store/selectors/user\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport API from \"../../utils/API\";\nimport { IoRemoveCircle } from \"react-icons/io5\";\nimport { Redirect } from \"react-router-dom\"\n\nimport './index.css';\n\nconst user_types = [\n    { key: 'researcher', text: 'Researcher', value: 'researcher'},\n    { key: 'viewer', text: 'Viewer', value: 'viewer'},\n    { key: 'reviewer', text: 'Reviewer', value: 'reviewer'},\n];\n\nconst Register = ({props}) => {\n\n    const user = useSelector(selectUser);\n\tconst dispatch = useDispatch();\n\n    const [ userData, setUserData] = useState({\n        email:'',\n        first_name:'',\n        last_name:'',\n        password:'',\n        passwordConfirmation:'',\n        type:'',\n        degrees:[]\n    });   \n    const [ error, setError ] = useState({});\n\n    useEffect(() => {\n\t\tdispatch(getUser());\n\t})\n    \n    useEffect(() => {\n        if (userData.type === 'researcher' && userData.degrees.length === 0)\n        setUserData({\n            ...userData,\n            degrees: [ \n                { \n                    title:'',\n                    institution:'',\n                    received:''\n                }\n            ]\n            });\n\n        if ( userData.type !== 'researcher' && userData.degrees.length > 0)\n            setUserData({\n            ...userData,\n                degrees: [ ]\n            });\n           \n\n    }, [userData, userData.degrees.length, userData.type]);\n\n    const handleChange = (e, {name, value}) => {\n        setUserData(userData => ({           \n            ...userData,\n            [name]: value            \n        }));\n    }\n\n    const handleDegreeChange = (e, {name, value}) => {\n        let names = name.split('_');\n        if (names.length !== 2)\n            return;\n\n        let field = names[0];\n        let index = parseInt(names[1]);\n\n        if (isNaN(index))\n            return;\n\n        setUserData(userData => {\n            return {\n                ...userData,\n                degrees:userData.degrees.map((deg,i) => i === index ? {\n                    ...deg,\n                    [field]:value\n                } : deg)\n            }\n        });\n    }\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n        API.post('/register', userData).then(res => {\n            if ( res.data && res.data.user ) {\n                dispatch(login({\n                    email: res.data.user.email,\n                    first_name: res.data.user.first_name,\n                    last_name: res.data.user.last_name,\n                    type: res.data.user.type,\n                }))\n            }\n        }).catch(( error ) => {\n            setError(error?.response?.data?.errors);\n        });\n    }\n\n    if (user !== null)\n\t\treturn <Redirect to={props?.location?.state?.from?.pathname? \n\t\t\t\t\t\t\tprops.location.state.from.pathname : `/${user.type}`} />\n\n    return (\n        <div className=\"register ui middle aligned center aligned grid\"> \n            <div className=\"column\">\n                <h2 className=\"ui teal image header\">\n                    <div className=\"content\">\n                    Register \n                    </div>\n                </h2>\n            <Form onSubmit={handleSubmit}\n                className=\"ui large form\" >\n                <Form.Field>\n                    <label className=\"white\">Email</label>\n                    <Form.Input type=\"email\"\n                                name=\"email\"\n                                value={userData.email}\n                                error={ error && error.email && \n                                    { content: error.email.join(' & ') }}\n                                placeholder=\"Enter your email\"\n                                onChange={handleChange} />\n                </Form.Field>\n                <Form.Field>\n                <label className=\"white\">First Name</label>\n                   <Form.Input type=\"text\"\n                            name=\"first_name\"\n                            value={userData.first_name}\n                            error={ error && error.first_name && \n                                { content: error.first_name.join(' & ') }}\n                            placeholder=\"In here with your name, your first name\"\n                            onChange={handleChange} />                 \n                </Form.Field> \n                <Form.Field>\n                <label className=\"white\">Last Name</label>     \n                <Form.Input type=\"text\"\n                            name=\"last_name\"\n                            value={userData.last_name}\n                            error={ error && error.last_name && \n                                { content: error.last_name.join(' & ') }}\n                            placeholder=\"Your last name here\"\n                            onChange={handleChange} /> \n                </Form.Field>\n                <Form.Field>\n                <label className=\"white\">Password</label>\n                    <Form.Input type=\"password\"\n                            name=\"password\"\n                            value={userData.password}\n                            error={ error && error.password && \n                                { content: error.password.join(' & ') }}\n                            placeholder=\"Choose your password\"\n                            onChange={handleChange} />\n                </Form.Field>\n                <Form.Field>\n                    <label className=\"white\">Confirm Password</label>\n                    <Form.Input type=\"password\"\n                            name=\"passwordConfirmation\"\n                            value={userData.passwordConfirmation}\n                            error={ error && error.password && \n                                { content: error.passwordConfirmation.join(' & ') }}\n                            placeholder=\"Type it in here again, in case you fucked up before\"\n                            onChange={handleChange} />              \n                </Form.Field>\n                <Form.Field>\n                    <label className=\"white\">User Type</label>\n                    <Form.Select\n                        placeholder=\"Select user type\"\n                        name=\"type\"\n                        value={userData.type}\n                        options={user_types}\n                        onChange={handleChange} />          \n                </Form.Field>\n\n                                                           \n                { userData.type === \"researcher\" && userData.degrees.map( (degree , i) => \n                    <Form.Group key={i}\n                                className=\"ui container grid middle degree\">\n                        <Form.Field>\n                            <label className=\"white\">Title</label>\n                            <Form.Input  type=\"text\"\n                                    name={`title_${i}`}\n                                    value={userData.degrees[i].title}\n                                    error={ error && error['degree_'+ i] && \n                                            error['degree_'+ i].title && \n                                            { content:error['degree_'+ i].title.join(' & ') }}\n                                    onChange={handleDegreeChange}\n                                    placeholder=\"As bestowth upon you\" />\n                        </Form.Field>\n                        <Form.Field>\n                            <label className=\"white\">Date received</label>\n                            <Form.Input  type=\"date\"\n                                    name={`received_${i}`}\n                                    value={userData.degrees[i].received}\n                                    error={ error && error['degree_'+ i] && \n                                            error['degree_'+ i].received && \n                                            { content:error['degree_'+ i].received.join(' & ') }}\n                                    onChange={handleDegreeChange}\n                                    placeholder=\"How long ago?\" />\n\n                        </Form.Field>\n                        <Form.Field>\n                            <label className=\"white\">Institution</label>\n                            <Form.Input  type=\"text\"\n                                    name={`institution_${i}`}\n                                    value={userData.degrees[i].institution}\n                                    error={ error && error['degree_'+ i] && \n                                            error['degree_'+ i].institution && \n                                            { content:error['degree_'+ i].institution.join(' & ') }}\n                                    onChange={handleDegreeChange}\n                                    placeholder=\"By this authority\" />\n                        </Form.Field>  \n                        { i > 0 && \n                        <Form.Field className=\"remove-field\">\n                            <Button\n                                type=\"button\"\n                                className=\"remove-row\"\n                                animated='vertical'\n                                onClick={(e) => {\n                                    setUserData({\n                                        ...userData,\n                                        degrees: userData.degrees.filter((degree, index ) => index !== i)\n                                    })\n                                }} >\n                                <Button.Content hidden>Remove</Button.Content>\n                                <Button.Content visible>\n                                <IoRemoveCircle />\n                                </Button.Content>                            \n                            </Button>   \n                        </Form.Field> }                 \n                    </Form.Group> )}\n                { userData.type === \"researcher\" &&\n                    <Form.Button type=\"button\" \n                                 onClick={(e) => { setUserData({\n                                    ...userData,\n                                    degrees: userData.degrees.concat({\n                                        title:'',\n                                        institution:'',\n                                        received:''\n                                    })})}}>\n                        Add Degree\n                    </Form.Button>}\n                    <Form.Button content=\"Submit\" />\n            </Form>\n            </div>                       \n        </div>\n    );  \n};\n\nexport default Register;\n","import React, { useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\n\nimport { Button, Table, Form, Icon, Card, Header, Divider,} from \"semantic-ui-react\";\nimport './index.css';\n\nconst UserTokens = () => {\n\n    const [ tokens, setTokens ] = useState([]);\n    const [ tokenName, setTokenName ] = useState(\"\");\n\n    \n    const [ fetch, setFetch ] = useState(true);\n    const [error, setError ] = useState({});\n\n    const [ newToken, setNewToken ] = useState(null);\n    const [ newTokenName, setNewTokenName ] = useState(null);\n\n    useEffect(() => {\n        if (fetch) {\n            setFetch(false);\n            API.get('/api/tokens/all').then( res => {\n                if ( res.data.tokens )\n                    setTokens(res.data.tokens);\n            }).catch(err => {\n                console.log(err);\n            })\n        }\n    }, [fetch]);\n\n    const hanleTokenNameChange = ( e, {name,value}) => {\n        setTokenName(value);\n    }\n\n    const generateToken = e => {\n        API.post('/api/tokens/create', {\n            tokenName:tokenName\n        }).then(response => {\n            console.log(response);\n            if (response.data.token) {\n                setNewToken(response.data.token);\n                setNewTokenName(tokenName);\n                setTokenName(\"\");\n                setFetch(true);\n            }\n        }).catch(err => {\n            if(err.response?.data?.errors)\n\t\t\t\t\tsetError(err.response.data.errors)\n        })\n    }\n\n    const handleTokenDelete = tokenId => {\n        API.post('/api/tokens/delete', {\n            tokenId:tokenId,\n        }).then(response => {\n            console.log(response);\n            if (response.data.success)\n                setTokens(tokens.filter( token => token.id !== tokenId ));\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const resetNewToken = () => {\n        setNewToken(null);\n        setNewTokenName(null);\n    }\n\n    return (\n        <div className=\"user-tokens ui container middle\">\n            { tokens && tokens.length > 0 &&\n            <Table compact celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Last Used</Table.HeaderCell>\n                        <Table.HeaderCell>Action</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    { tokens.map( (token, i) => \n                        <Table.Row key={i}>\n                            <Table.Cell>{token.name}</Table.Cell>\n                            <Table.Cell>{token.last_used_at || 'Never used'}</Table.Cell>\n                            <Table.Cell>\n                                <Button icon labelPosition='left'\n                                onClick={e => handleTokenDelete(token.id)}\n                                        color='red' >\n                                    <Icon name='delete' />\n                                    Remove\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table> }\n            <Divider />\n            <Header size='medium'>Generate new token</Header>\n            <Form>\n                <Form.Field inline>\n                    <label>Token Name</label>\n                    <Form.Input placeholder=\"Token Name\"\n                                name=\"tokenName\"\n                                type=\"text\"\n                                value={tokenName}\n                                error={ error && error.tokenName && \n                                        {content: error.tokenName.join(' & ') }}\n                                onChange={hanleTokenNameChange} />\n                </Form.Field>\n                <Button\n                    className=\"generateToken\"\n                    primary\n                    onClick={generateToken}\n                    size='small' >\n                    Generate Token\n                </Button>       \n            </Form>   \n            { newToken && <> \n            <Divider />\n            <Card fluid>\n                <Card.Content>\n                    <Card.Header>New Token: { newTokenName }</Card.Header>\n                    <Card.Meta>Keep it safe, you won't be able to see this token again</Card.Meta>\n                    <Card.Description>\n                    { newToken }\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                    <Button primary\n                            onClick={(e) => resetNewToken()}>\n                        Got it, hide it now\n                    </Button>\n                    </div>\n                </Card.Content>\n            </Card> \n            </>}\n        </div>\n    );  \n};\n\nexport default UserTokens;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser } from \"../../store/selectors/user\";\nimport { logout } from \"../../store/actions/user\";\nimport './index.css';\nimport { Menu, Dropdown } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\nimport API from \"../../utils/API\";\n\nconst UserNav = () => {\n    const user = useSelector(selectUser);\n    const dispatch = useDispatch();\n    const handleLogout = e => {        \n        API.get('/logout').then(response => {\n            dispatch(logout());\n        }).catch(err => {\n\n        })\n    }\n\n    return (\n        <>\n        <Menu.Item to={`/${user.type}/evaluation_metrics`}\n            as={NavLink}>\n            Evaluation Metrics\n        </Menu.Item>\n        <Menu.Menu position='right'>\n            { user && <>            \n            <Dropdown item text={user.firstName + ' ' + user.lastName}>\n                <Dropdown.Menu>\n                    <Dropdown.Item exact to={`/${user.type}/user/tokens`} \n                            as={NavLink}>\n                            Tokens\n                    </Dropdown.Item>\n                    <Dropdown.Item text=\"Logout\"  onClick={handleLogout}/>\n                </Dropdown.Menu>\n            </Dropdown>\n            </>}\n        </Menu.Menu>\n        </>\n    );  \n};\n\nexport default UserNav;\n","import React from \"react\";\nimport { Menu } from 'semantic-ui-react'\n\nimport UserNav from \"../../../../components/UserNav\";\nimport {\n    NavLink\n  } from \"react-router-dom\";\n\nimport './index.css';\n\nconst AdminNavigation = ({url}) => {\n\n    return (\n        <Menu>\n            <Menu.Item to={`${url}/users`}\n                as={NavLink}>\n                Users\n            </Menu.Item>\n            <Menu.Item to={`${url}/publications`}\n                as={NavLink}>\n                Publications\n            </Menu.Item>\n            <Menu.Item to={`${url}/withdrawls`}\n                as={NavLink}>\n                Withdrawls\n            </Menu.Item>            \n            <UserNav />\n        </Menu>   \n    );  \n};\n\nexport default AdminNavigation;\n","import React, { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\n\nimport { Table, Button, Icon, Modal, Header, Container, Segment } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\nimport './index.css'\n\nconst UserList = () => {\n\n    const [fetch, setFetch] = useState(true);\n    const [ users, setUsers ] = useState([]);\n    const [ open, setOpen ] = useState(false);\n    const [ currentDelete, setCurrentDelete ] = useState(null);\n\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get('/api/users/all').then(response => {\n                if (response.data.users)\n                    setUsers(response.data.users);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch]);\n\n    const removeUser = id => {\n        API.post(`/api/users/${id}/remove`).then((response) => {\n            if(response.data.success) {\n                setUsers(users.filter(user => user.id !== id));\n            }\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        <Container className=\"users-list\"> \n            <Segment clearing vertical>            \n                <Header floated='left' >All Users</Header>\n                <Button floated='right'\n                        icon\n                        labelPosition='left'\n                        as={Link}\n                        to='/admin/users/new/edit'\n                        primary>\n                    <Icon name='plus' />\n                    Add User\n                </Button>\n            </Segment>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>User Type</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                { users.map(user => \n                    <Table.Row key={user.id}>\n                        <Table.Cell>{user.first_name + ' ' + user.last_name}</Table.Cell>\n                        <Table.Cell>{user.type}</Table.Cell>\n                        <Table.Cell>{user.status}</Table.Cell>\n                        <Table.Cell textAlign='center'>\n                        <Button primary animated='vertical'\n                                    to={`/admin/users/${user.id}/view`}\n                                    as={Link}>\n                                <Button.Content hidden>View</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='eye' />\n                                </Button.Content>\n                            </Button>\n                            <Button secondary animated='vertical'\n                                    to={`/admin/users/${user.id}/edit`}\n                                    as={Link}>\n                                <Button.Content hidden>Edit</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='pencil' />\n                                </Button.Content>\n                            </Button> \n                            <Button color='red' animated='vertical'\n                                    onClick={(e) => {\n                                        setOpen(true);\n                                        setCurrentDelete({\n                                            name:user.first_name + ' ' + user.last_name,\n                                            id:user.id\n                                        });\n                                    }}>\n                                <Button.Content hidden>Remove</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='delete' />\n                                </Button.Content>\n                            </Button>                                   \n                        </Table.Cell>\n                    </Table.Row>\n                )}\n                </Table.Body>\n            </Table>\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                dimmer='blurring'\n                size='small'>\n                <Header icon textAlign='center'>\n                    <Icon name='user' />\n                    Remove user {currentDelete?.name}?\n                </Header>\n                <Modal.Content>\n                    <Container textAlign='center'>\n                    <p className=\"align center\">\n                        This will permanently remove the user and all of their related data.\n                    </p>\n                    </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button color='blue' inverted onClick={() => setOpen(false)}>\n                        <Icon name='remove' /> No\n                    </Button>\n                    <Button color='red' inverted onClick={() => {\n                        setOpen(false);\n                        removeUser(currentDelete?.id);\n                        setCurrentDelete(null);\n                    }}>\n                        <Icon name='checkmark' /> Yes\n                    </Button>\n                </Modal.Actions>\n            </Modal>                    \n        </Container>\n    )\n}\nexport default UserList;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Container, Header, Loader, Table, Icon, Button, } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nconst ViewUser = () => {\n\n    let { id } = useParams();\n\n    const [fetch, setFetch ] = useState(true);\n    const [fetchDegrees, setFetchDegrees ] = useState(false);\n    const [ user, setUser ] = useState(null);\n    const [ degrees, setDegrees ] = useState([]);\n    \n    useEffect(() => {\n        if(fetch){\n            setFetch(false);\n            API.get(`/api/users/${id}`).then((response) => {\n                if (response.data.user) {\n                    setUser(response.data.user);\n\n                    if (response.data.user.type === 'researcher')\n                        setFetchDegrees(true);\n                }\n\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    },[fetch, id]);\n\n    useEffect(() => {\n        if (fetchDegrees && user?.type === 'researcher') {\n            setFetchDegrees(false);\n            API.get(`/api/users/${id}/degrees`).then((response => {\n                if (response.data.degrees)\n                    setDegrees(response.data.degrees);\n            })).catch((err) => {\n\n            })\n        }\n\n    }, [user, fetchDegrees, id]);\n\n    if (!user)\n        return <Container><Loader active inline='centered' /></Container>\n\n    return(\n        <Container className=\"view-user\">\n            <Header dividing>User Info</Header>\n                <Table definition>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell />\n                            <Table.HeaderCell>\n                                <Button labelPosition='left'\n                                    floated='right'\n                                    icon\n                                    secondary\n                                    to={`/admin/users/${id}/edit`}\n                                    as={Link}\n                                    size='small'>\n                                    <Icon name='pencil' />\n                                    Edit User\n                                </Button>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                    <Table.Row>\n                            <Table.Cell>First Name</Table.Cell>\n                            <Table.Cell>{user.first_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Last Name</Table.Cell>\n                            <Table.Cell>{user.last_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>User Type</Table.Cell>\n                            <Table.Cell>{user.type}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Status</Table.Cell>\n                            <Table.Cell>{user.status}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Email</Table.Cell>\n                            <Table.Cell>{user.email}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>ID</Table.Cell>\n                            <Table.Cell>{user.id}</Table.Cell>\n                        </Table.Row>\n                        { user.admin_email && <Table.Row>\n                            <Table.Cell>Admin Email</Table.Cell>\n                            <Table.Cell>{user.admin_email}</Table.Cell>\n                        </Table.Row>}\n                    </Table.Body>\n                </Table>\n                \n            { user.type === \"researcher\" && <>\n            <Header dividing>Degrees</Header>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Intitution</Table.HeaderCell>\n                        <Table.HeaderCell>Received</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    { degrees.map(degree => <Table.Row>\n                        <Table.Cell>{degree.title}</Table.Cell>\n                        <Table.Cell>{degree.institution}</Table.Cell>\n                        <Table.Cell>{degree.received}</Table.Cell>\n                    </Table.Row>)}\n                </Table.Body>\n            </Table>\n            </>}\n        </Container>\n    );\n}\n\nexport default ViewUser;","import React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { \n    Container, \n    Header,\n    Loader, \n    Table, \n    Icon, \n    Button, \n    Segment,\n    Form, \n} from 'semantic-ui-react';\n\nimport './index.css';\n\nconst user_types = [\n    { key: 'researcher', text: 'Researcher', value: 'researcher'},\n    { key: 'viewer', text: 'Viewer', value: 'viewer'},\n    { key: 'reviewer', text: 'Reviewer', value: 'reviewer'},\n    { key: 'editor', text: 'Editor', value: 'editor'},\n    { key: 'admin', text: 'Admin', value: 'admin'},\n];\n\nconst user_statuses = [\n    { key: 'approved', text: 'Approved', value: 'approved'},\n    { key: 'awaiting', text: 'Awaiting', value: 'awaiting'},\n];\n\nconst degree_template = { \n    title:\"\",\n    received:\"\",\n    institution:\"\",\n}\nconst user_template = { \n    first_name:\t\"\",\n    last_name:\t\"\",\n    type:\t\"\",\n    email:\t\"\",\n    admin_email: \"\",\n    status:\t\"\",\n    password:\"\",\n}\n\nconst EditUser = () => {\n\n    let { id } = useParams();\n    let history = useHistory();\n\n    const [ fetch, setFetch ] = useState(true);\n    const [ fetchDegrees, setFetchDegrees ] = useState(false);\n    const [ user, setUser ] = useState(user_template);\n    const [ degrees, setDegrees ] = useState([]);\n    const [ error, setError ] = useState({});\n    const [ changed, setChanged ] = useState({});\n    const [ newDegree, setNewDegree ] = useState(false);\n    const [ degreeError, setDegreeError ] = useState({});\n    const [ degree, setDegree ] = useState(degree_template);\n     \n    const newUser = id === 'new'\n    \n    useEffect(() => {\n        if(!newUser && fetch){\n            setFetch(false);\n            API.get(`/api/users/${id}`).then((response) => {\n                if (response.data.user) {\n                    setUser(response.data.user);\n\n                    if (response.data.user.type === 'researcher')\n                        setFetchDegrees(true);\n                }\n\n            }).catch((error) => {\n                console.log(error.response);\n            })\n        }\n    },[fetch, id, newUser]);\n\n    useEffect(() => {\n        if (!newUser && fetchDegrees && user?.type === 'researcher') {\n            setFetchDegrees(false);\n            API.get(`/api/users/${id}/degrees`).then((response => {\n                if (response.data.degrees)\n                    setDegrees(response.data.degrees);\n            })).catch((error) => {\n                console.log(error);\n            })\n        }\n\n    }, [user, fetchDegrees, id, newUser]);\n\n    const handleChange = (e, {name, value}) => {\n        setUser({\n            ...user,\n            [name]: value\n        })\n        if (!newUser)\n            setChanged({\n                ...changed,\n                [name]: true\n            });\n        else \n            setChanged({new_user:true})\n    }\n\n    const handleDegreeChange = (e, {name, value}) => {\n        setDegree({\n            ...degree,\n            [name]:value\n        })\n    }\n\n    const addDegree = () => {\n        API.post(`/api/users/${id}/degrees/new`, degree).then(response => {\n            if (response.data.success){\n                setDegrees([...degrees, degree]);\n                setDegree(degree_template);\n                setNewDegree(false);\n            }\n        }).catch(err => {\n            if (err.response.data.errors)\n                setDegreeError(err.response.data.errors);\n        })\n    }   \n\n    const removeDegree = degree_id => {\n        API.post(`/api/users/${id}/degrees/delete`, {\n            degree_id:degree_id\n        }).then(response => {\n            if (response.data.success){\n                setDegrees(degrees.filter(d => d.id !== degree_id));\n            }\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n\n    const saveField = (name, value) => { \n        API.post(`/api/users/${id}/edit`, {\n            [name]:value\n        }).then((response) => {\n            if(response.data.success) {\n                setChanged({\n                    ...changed,\n                    [name]:false\n                })\n                setError({\n                    ...error,\n                    [name]:false\n                })\n            }\n        }).catch((error) => {\n            if (error.response.data.errors)\n                setError(error.response.data.errors);            \n        })\n    }\n\n    const saveAll = (e) => {\n        API.post(`/api/users/${newUser ? 'new' : `${id}/edit`}`, \n                newUser ? {\n                    ...user,\n                    passwordConfirmation:user.password\n                } : user).then((response) => {\n            if(response.data.success) {\n                setChanged({})\n                setError({});\n                if (newUser) {\n                    history.replace(`/admin/users/${response.data.user.id}/view`)\n                }\n            }\n\n            if (response.data.user) {\n                setUser(response.data.user)\n            }\n        }).catch((error) => {\n            if (error.response.data.errors)\n                setError(error.response.data.errors);            \n        })\n    }\n\n\n\n    if (!user)\n        return <Container><Loader active inline='centered' /></Container>\n\n    return(\n        <Container className=\"edit-user\">\n            <Segment clearing vertical>            \n                <Header floated='left' >User Info</Header>\n                {Object.keys(changed).length > 0 &&\n                Object.keys(changed).reduce((acc, current) => \n                    acc || changed[current], false) ?\n                    <Button labelPosition='left'\n                        floated='right'\n                        icon\n                        onClick={saveAll}\n                        secondary\n                        size='small'>\n                        <Icon name='save' />\n                        Save User\n                    </Button> : \n                    <Button labelPosition='left'\n                            floated='right'\n                            icon\n                            disabled\n                            primary\n                            size='small'>\n                            <Icon name='save' />\n                            Saved\n                    </Button> }\n            </Segment>              \n            <Table definition>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>First Name</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"First Name\"\n                                            type=\"text\"           \n                                            name='first_name'               \n                                            error={ error && error.first_name && \n                                                { content: error.first_name.join(' & '),\n                                                pointing:'left' }}\n                                            icon={ changed?.first_name && { \n                                                name: 'save', \n                                                circular: true, \n                                                link:true,\n                                                onClick: e => saveField('first_name',user.first_name)\n                                            }}                      \n                                            onChange={handleChange}\n                                            value={user.first_name} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Last Name</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Last Name\"\n                                            name='last_name'\n                                            type=\"text\"\n                                            error={ error && error.last_name && \n                                                { content: error.last_name.join(' & '),\n                                                pointing:'left' }}\n                                            icon={ changed?.last_name ? { \n                                                name: 'save', \n                                                circular: true, \n                                                link:true,\n                                                onClick: e => saveField('last_name',user.last_name)\n                                            } : null}\n                                            onChange={handleChange}\n                                            value={user.last_name} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>User Type</Table.Cell>\n                        <Table.Cell verticalAlign='middle'>\n                            \n                            <Form.Select                                         \n                                placeholder=\"User Type\"     \n                                className=\"table_select\"\n                                value={user.type}\n                                error={ error && error.type && \n                                    { content: error.type.join(' & '),\n                                    pointing:'left' }}\n                                name=\"type\"                                  \n                                onChange={handleChange}\n                                options={user_types}/>\n                    \n                            {changed?.type && \n                                <Icon                                         \n                                    name= 'save'\n                                    className='select_icon'\n                                    circular={true}                                             \n                                    link={true}\n                                    onClick={ e => saveField('type',user.type)} />\n                                }                                                                    \n                            \n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>User Status</Table.Cell>\n                        <Table.Cell verticalAlign='middle'>\n                            \n                            <Form.Select                                         \n                                placeholder=\"User Status\"     \n                                className=\"table_select\"\n                                value={user.status}\n                                error={ error && error.status && \n                                    { content: error.status.join(' & '),\n                                    pointing:'left' }}\n                                name=\"status\"                                  \n                                onChange={handleChange}\n                                options={user_statuses}/>\n\n                    \n                            {changed?.status && \n                                <Icon                                         \n                                    name= 'save'\n                                    className='select_icon'\n                                    circular={true}                                             \n                                    link={true}\n                                    onClick={ e => saveField('status',user.status)} />\n                                } \n\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Email</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Email\"\n                                            type=\"email\"\n                                            name='email'\n                                            error={ error && error.email && \n                                                { content: error.email.join(' & '),\n                                                pointing:'left' }}\n                                            icon={ changed?.email ? { \n                                                name: 'save', \n                                                circular: true, \n                                                link:true,\n                                                onClick: e => saveField('email',user.email)\n                                            } : null}\n                                            onChange={handleChange}\n                                            value={user.email} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row>\n                    { user.type !== 'admin' && <Table.Row>\n                        <Table.Cell>Admin Email</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Admin Email\"\n                                            name='admin_email'\n                                            type=\"email\"\n                                            error={ error && error.admin_email && \n                                                { content: error.admin_email.join(' & '),\n                                                pointing:'left' }}\n                                            onChange={handleChange}\n                                            icon={ changed?.admin_email ? { \n                                                name: 'save', \n                                                circular: true, \n                                                link:true,\n                                                onClick: e => saveField('admin_email',user.admin_email)\n                                            } : null}\n                                            value={user.admin_email} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row>}\n                    { newUser ? <Table.Row>\n                        <Table.Cell>Password</Table.Cell>    \n                        <Table.Cell>\n                        <Form.Field>\n                            <Form.Input placeholder=\"A secure password\"\n                                            name='password'\n                                            type=\"password\"\n                                            error={ error && error.password && \n                                                { content: error.password.join(' & '),\n                                                pointing:'left' }}\n                                            onChange={handleChange}\n                                            icon={ changed?.password ? { \n                                                name: 'save', \n                                                circular: true, \n                                                link:true,\n                                                onClick: e => saveField('password',user.password)\n                                            } : null}\n                                            value={user.password} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row> :\n                    <Table.Row>\n                        <Table.Cell>ID</Table.Cell>\n                        <Table.Cell>{user.id}</Table.Cell>\n                    </Table.Row>}\n                    \n                </Table.Body>\n            </Table>\n            \n            { !newUser && user.type === \"researcher\" && <>\n            <Segment clearing vertical>            \n                <Header floated='left' >Degrees</Header>\n                { newDegree ? \n                <>\n                <Button floated='right'\n                        icon\n                        labelPosition='left'\n                        onClick={ e => addDegree()}\n                        primary>\n                    <Icon name='save' />\n                    Save Degree\n                </Button>\n                <Button floated='right'\n                        icon\n                        labelPosition='left'\n                        onClick={ e => setNewDegree(false)}\n                        primary>\n                    <Icon name='delete' />\n                    Cancel\n                </Button>\n                </>\n                :\n                <Button floated='right'\n                        icon\n                        labelPosition='left'\n                        onClick={ e => setNewDegree(true)}\n                        primary>\n                    <Icon name='plus' />\n                    Add Degree\n                </Button>}\n            </Segment>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Intitution</Table.HeaderCell>\n                        <Table.HeaderCell>Received</Table.HeaderCell>\n                        <Table.HeaderCell>Remove Degree</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    { newDegree && <Table.Row>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Title\"\n                                            type=\"text\"\n                                            name='title'\n                                            error={ degreeError && degreeError.title && \n                                                { content: degreeError.title.join(' & '),\n                                                pointing:'left' }}\n                                            onChange={handleDegreeChange}\n                                            value={degree.title} />\n                            </Form.Field>\n                        </Table.Cell>    \n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Institution\"\n                                            type=\"text\"\n                                            name='institution'\n                                            error={ degreeError && degreeError.institution && \n                                                { content: degreeError.institution.join(' & '),\n                                                pointing:'left' }}\n                                            onChange={handleDegreeChange}\n                                            value={degree.institution} />\n                            </Form.Field>\n                        </Table.Cell>    \n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Date Received\"\n                                            type=\"date\"\n                                            name='received'\n                                            error={ degreeError && degreeError.received && \n                                                { content: degreeError.received.join(' & '),\n                                                pointing:'left' }}\n                                            onChange={handleDegreeChange}\n                                            value={degree.received} />\n                            </Form.Field>\n                        </Table.Cell>    \n                    </Table.Row>}\n                    { degrees.map(degree => <Table.Row key={degree.id}>\n                        <Table.Cell>{degree.title}</Table.Cell>\n                        <Table.Cell>{degree.institution}</Table.Cell>\n                        <Table.Cell>{degree.received}</Table.Cell>\n                        <Table.Cell>\n                            <Button color='red'\n                                    onClick={e => removeDegree(degree.id)}\n                                    icon='remove'/>\n                        </Table.Cell>\n                    </Table.Row>)}\n                </Table.Body>\n            </Table>\n            </>}\n        </Container>\n    );\n}\n\nexport default EditUser;","import React, { useEffect, useState } from 'react';\n\nimport { \n    Container,\n    Header,\n    Loader,\n    Table,\n    Button,\n    Icon,\n    Modal,\n    Segment\n} from 'semantic-ui-react';\n\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../../store/selectors/user';\n\nimport { \n    Link\n} from 'react-router-dom'\n\nimport API from '../../../../utils/API';\n\nconst PublicationsList = () => {\n\n    const user = useSelector(selectUser);\n\n    const [ fetchPublications, setFetchPublications ] = useState(true);\n    const [ journals, setJournals ] = useState(null);\n    const [ open, setOpen ] = useState(false);\n    const [ currentDelete, setCurrentDelete ] = useState(null);\n\n    const noEdit = user.type !== 'admin' && user.type !== 'editor';\n    \n    useEffect(() => {\n        if(fetchPublications) {\n            setFetchPublications(false);\n            API.get('/api/journals/all').then((response) => {\n                if (response.data.journals) \n                    setJournals(response.data.journals)\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    },[fetchPublications])\n\n    const removeJournal = id => {\n        API.post(`/api/journals/${id}/remove`).then((response) => {\n            if (response.data.success) {\n                setCurrentDelete(null);\n                setJournals(journals.filter(journal => journal.id !== id));\n            }\n        }).catch((error) => {\n            console.error(error);\n        })\n    }\n\n    if (!journals)\n        return <Container><Loader /></Container>\n\n    return(\n    <Container>\n        <Segment clearing vertical>\n            <Header floated='left'>All Publications</Header>\n            { ( user.type === 'admin' || user.type === 'editor' ) &&\n            <Button primary\n                    icon\n                    labelPosition='left'\n                    floated='right'\n                    as={Link}\n                    to={`/${user.type}/publications/new/edit`}>\n                        <Icon name='plus' />\n                        New Publication\n            </Button> }\n        </Segment>\n        \n        <Table celled>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Title</Table.HeaderCell>\n                    <Table.HeaderCell>Published Date</Table.HeaderCell>\n                    { ( user.type === 'admin' || user.type === 'editor' ) &&\n                    <Table.HeaderCell>Status</Table.HeaderCell> }\n                    <Table.HeaderCell>Actions</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                { journals.map(journal => \n                    <Table.Row key={journal.id}>\n                        <Table.Cell>{journal.title}</Table.Cell>\n                        <Table.Cell>{journal.published_date}</Table.Cell>\n                        { ( user.type === 'admin' || user.type === 'editor' ) &&\n                        <Table.Cell>{journal.status}</Table.Cell>}\n                        <Table.Cell textAlign='center'>\n                            <Button primary animated='vertical'\n                                    to={`/${user.type}/publications/${journal.id}/view`}\n                                    as={Link}>\n                                <Button.Content hidden>View</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='eye' />\n                                </Button.Content>\n                            </Button>\n                            { !noEdit && <>\n                            <Button secondary animated='vertical'\n                                    to={`/${user.type}/publications/${journal.id}/edit`}\n                                    as={Link}>\n                                <Button.Content hidden>Edit</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='pencil' />\n                                </Button.Content>\n                            </Button> \n                            <Button color='red' animated='vertical'\n                                    onClick={(e) => {\n                                        setOpen(true);\n                                        setCurrentDelete({\n                                            title:journal.title,\n                                            id:journal.id\n                                        });\n                                    }}>\n                                <Button.Content hidden>Remove</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='delete' />\n                                </Button.Content>\n                            </Button>  </> }              \n                        </Table.Cell>\n                    </Table.Row>)}\n            </Table.Body>\n        </Table>\n        <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                dimmer='blurring'\n                size='small'>\n                <Header icon textAlign='center'>\n                    <Icon name='book' />\n                    Remove journal {currentDelete?.title}?\n                </Header>\n                <Modal.Content>\n                    <Container textAlign='center'>\n                    <p className=\"align center\">\n                        This will permanently remove the journal and all of their related data.\n                    </p>\n                    </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button color='blue' inverted onClick={() => setOpen(false)}>\n                        <Icon name='remove' /> No\n                    </Button>\n                    <Button color='red' inverted onClick={() => {\n                        setOpen(false);\n                        removeJournal(currentDelete?.id);\n                        setCurrentDelete(null);\n                    }}>\n                        <Icon name='checkmark' /> Yes\n                    </Button>\n                </Modal.Actions>\n            </Modal>           \n    </Container>\n    );\n}\n\nexport default PublicationsList;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Header, Loader, Table, Icon, Button, Segment, Modal, Embed, Form } from 'semantic-ui-react';\n\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../../store/selectors/user'\n\nimport './index.css'\n\nconst status_types = [\n    { key: 'pending', text: 'Pending', value: 'pending' },\n    { key: 'approved', text: 'Approved', value: 'approved' },\n    { key: 'rejected', text: 'Rejected', value: 'rejected' }\n]\n\nconst EditPublication = () => {\n\n    let { id } = useParams();\n    let history = useHistory();\n\n    const user = useSelector(selectUser);\n\n    const [fetch, setFetch] = useState(true);\n    const [journal, setJournal] = useState({\n        title: \"\",\n        published_date: \"\",\n        status: \"\",\n        admin_email: \"\",\n        papers: [],\n    });\n\n    const [addPaper, setAddPaper] = useState(false);\n    const [fetchPapers, setFetchPapers] = useState(false);\n    const [papers, setPapers] = useState(null);\n\n    const [viewPaper, setViewPaper] = useState(false);\n    const [paper, setPaper] = useState(null);\n\n    const [error, setError] = useState({});\n    const [changed, setChanged] = useState({});\n\n    const [admins, setAdmins] = useState(null);\n    const [editors, setEditors] = useState(null);\n    const [fetchUsers, setFetchUsers] = useState(true);\n\n    const newJournal = id === 'new'\n\n    useEffect(() => {\n        if (!newJournal && id !== 'new' && fetch) {\n            setFetch(false);\n            API.get(`/api/journals/${id}`).then((response) => {\n                if (response.data.journal)\n                    setJournal(response.data.journal);\n                setFetchUsers(true);\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetch, id, newJournal]);\n\n    useEffect(() => {\n        if (!newJournal && fetchPapers) {\n            setFetchPapers(false);\n            API.get('/api/paper/all').then((response) => {\n                if (response.data.papers) {\n                    setPapers(response.data.papers);\n                }\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetchPapers, newJournal])\n\n    useEffect(() => {\n        if (fetchUsers) {\n            setFetchUsers(false);\n            API.get('/api/users/of_type/admin').then((response) => {\n                if (response.data.users) {\n                    setAdmins(response.data.users.map(user => ({\n                        key: user.email,\n                        text: user.first_name + ' ' + user.last_name,\n                        value: user.email\n                    })))\n                }\n            }).catch((error) => {\n                console.error(error);\n            })\n            API.get('/api/users/of_type/editor').then((response) => {\n                if (response.data.users) {\n                    setEditors(response.data.users.map(user => ({\n                        key: user.email,\n                        text: user.first_name + ' ' + user.last_name,\n                        value: user.email\n                    })))\n                }\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetchUsers, newJournal])\n\n\n\n    const addPaperToJournal = paper_id => {\n        API.post(`/api/journals/${id}/add_paper`, {\n            paper_id: paper_id,\n        }).then((response) => {\n            if (response.data.success) {\n                setJournal({\n                    ...journal,\n                    papers: [...journal.papers, response.data.paper]\n                })\n            }\n        }).catch((error) => {\n            console.error(error);\n        })\n    }\n\n    const removePaperFromJournal = paper_id => {\n        API.post(`/api/journals/${id}/remove_paper`, {\n            paper_id: paper_id,\n        }).then((response) => {\n            if (response.data.success) {\n                setJournal({\n                    ...journal,\n                    papers: journal.papers.filter(paper => paper.id !== paper_id)\n                })\n            }\n        }).catch((error) => {\n            console.error(error);\n        })\n    }\n\n    const saveField = (name, value) => {\n        API.post(`/api/journals/${id}/edit`, {\n            [name]: value\n        }).then((response) => {\n            if (response.data.success) {\n                setError({\n                    ...error,\n                    [name]: false\n                })\n                setChanged({\n                    ...changed,\n                    [name]: false\n                })\n            }\n        }).catch((error => {\n            console.error(error.response);\n            setError(error.response.data.errors);\n        }))\n    }\n\n    const saveAll = e => {\n        API.post(`/api/journals/${newJournal ? 'create' : `${id}/edit`}`, journal).then((response) => {\n            if (response.data.success) {\n                setError({})\n                setChanged({})\n                if (response.data.journal)\n                    history.replace(`/admin/publications/${response.data.journal.id}/view`)\n            }\n        }).catch((error => {\n            console.error(error.response);\n            setError(error.response.data.errors);\n        }))\n    }\n\n    const handleChange = (e, { name, value }) => {\n        setJournal({\n            ...journal,\n            [name]: value\n        });\n\n        if (!newJournal)\n            setChanged({\n                ...changed,\n                [name]: value\n            })\n        else\n            setChanged({ new_journal: true });\n    }\n\n    if (!journal)\n        return <Container><Loader active inline='centered' /></Container>\n\n    return (\n        <Container className=\"edit-publication\">\n            <Header dividing>Journal Info</Header>\n            <Table definition>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell />\n                        <Table.HeaderCell>\n                            {Object.keys(changed).length > 0 &&\n                                Object.keys(changed).reduce((acc, current) =>\n                                    acc || changed[current], false) ?\n                                <Button labelPosition='left'\n                                    floated='right'\n                                    icon\n                                    onClick={saveAll}\n                                    secondary\n                                    size='small'>\n                                    <Icon name='save' />\n                                        Save Publication\n                                    </Button> :\n                                <Button labelPosition='left'\n                                    floated='right'\n                                    icon\n                                    disabled\n                                    primary\n                                    size='small'>\n                                    <Icon name='save' />\n                                            Saved\n                                    </Button>}\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>\n                            <Form.Input placeholde=\"Title\"\n                                name='title'\n                                type=\"text\"\n                                value={journal.title}\n                                onChange={handleChange}\n                                error={error && error.title &&\n                                {\n                                    content: error.title.join(' & '),\n                                    pointing: 'left'\n                                }}\n                                icon={changed?.title && {\n                                    name: 'save',\n                                    circular: true,\n                                    link: true,\n                                    onClick: e => saveField('title', journal.title)\n                                }} />\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Published Date</Table.Cell>\n                        <Table.Cell>\n                            <Form.Input placeholde=\"Published Date\"\n                                name='published_date'\n                                type=\"date\"\n                                value={journal.published_date}\n                                onChange={handleChange}\n                                error={error && error.published_date &&\n                                {\n                                    content: error.published_date.join(' & '),\n                                    pointing: 'left'\n                                }}\n                                icon={changed?.published_date && {\n                                    name: 'save',\n                                    circular: true,\n                                    link: true,\n                                    onClick: e => saveField('published_date', journal.published_date)\n                                }} />\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Status</Table.Cell>\n                        <Table.Cell>\n                            {(user.type === 'admin') ? <>\n                                <Form.Select placeholde=\"Status\"\n                                    name='status'\n                                    type=\"date\"\n                                    className='table_select'\n                                    options={status_types}\n                                    value={journal.status}\n                                    onChange={handleChange}\n                                    error={error && error.status &&\n                                    {\n                                        content: error.status.join(' & '),\n                                        pointing: 'left'\n                                    }}\n                                />\n                                {changed?.status &&\n                                    <Icon\n                                        name='save'\n                                        className='select_icon'\n                                        circular={true}\n                                        link={true}\n                                        onClick={e => saveField('status', journal.status)} />\n                                } </> : journal.status}\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Editor</Table.Cell>\n                        <Table.Cell>\n                            {(user.type === 'admin') ? <>\n                                <Form.Select name=\"editor_email\"\n                                    placeholder=\"Editor Email\"\n                                    className='table_select'\n                                    value={journal.editor_email}\n                                    onChange={handleChange}\n                                    error={error && error.editor_email &&\n                                    {\n                                        content: error.editor_email.join(' & '),\n                                        pointing: 'left'\n                                    }}\n                                    options={editors} />\n                                {changed?.editor_email &&\n                                    <Icon\n                                        name='save'\n                                        className='select_icon'\n                                        circular={true}\n                                        link={true}\n                                        onClick={e => saveField('editor_email', journal.editor_email)} />\n                                }\n                            </> : journal.editor_email}\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Admin</Table.Cell>\n                        <Table.Cell>\n                            {(user.type === 'admin') ?\n                                <>\n                                    <Form.Select name=\"admin_email\"\n                                        placeholder=\"Admin Email\"\n                                        className='table_select'\n                                        value={journal.admin_email}\n                                        onChange={handleChange}\n                                        error={error && error.admin_email &&\n                                        {\n                                            content: error.admin_email.join(' & '),\n                                            pointing: 'left'\n                                        }}\n                                        options={admins} />\n                                    {changed?.admin_email &&\n                                        <Icon\n                                            name='save'\n                                            className='select_icon'\n                                            circular={true}\n                                            link={true}\n                                            onClick={e => saveField('admin_email', journal.admin_email)} />\n                                    }\n                                </> : journal.admin_email}\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n\n            { !newJournal && journal.papers && <>\n                <Segment clearing vertical>\n                    <Header floated='left' >Papers</Header>\n                    <Button floated='right'\n                        icon\n                        labelPosition='left'\n                        onClick={e => {\n                            setAddPaper(true)\n                            setFetchPapers(true);\n                        }}\n                        primary>\n                        <Icon name='plus' />\n                    Add paper\n                </Button>\n                </Segment>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Title</Table.HeaderCell>\n                            <Table.HeaderCell>Researcher</Table.HeaderCell>\n                            <Table.HeaderCell>Editor</Table.HeaderCell>\n                            <Table.HeaderCell>Metric Used</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>File</Table.HeaderCell>\n                            <Table.HeaderCell>Remove From Journal</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {journal.papers.map(paper => <Table.Row key={paper.id}>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            <Table.Cell>{paper.researcher}</Table.Cell>\n                            <Table.Cell>{paper.editor}</Table.Cell>\n                            <Table.Cell>{paper.em_name}</Table.Cell>\n                            <Table.Cell>{paper.status}</Table.Cell>\n                            <Table.Cell>\n                                <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setPaper(paper)\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                    <Icon name=\"file alternate\" />\n                                View File\n                            </Button>\n                            </Table.Cell>\n                            <Table.Cell>\n                                <Button color='red'\n                                    icon\n                                    onClick={e => {\n                                        removePaperFromJournal(paper.id)\n                                    }}>\n                                    <Icon name=\"remove\" />\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>)}\n                    </Table.Body>\n                </Table>\n            </>}\n\n            <Modal\n                onClose={() => setAddPaper(false)}\n                onOpen={() => setAddPaper(true)}\n                open={addPaper}\n                dimmer='blurring'\n                size='large'>\n                <Header textAlign='center'>\n                    Select papers to add to {journal.title}\n                </Header>\n                <Modal.Content scrolling>\n                    <Container textAlign='center'>\n                        <Table>\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell>Title</Table.HeaderCell>\n                                    <Table.HeaderCell>Researcher</Table.HeaderCell>\n                                    <Table.HeaderCell>Status</Table.HeaderCell>\n                                    <Table.HeaderCell>File</Table.HeaderCell>\n                                    <Table.HeaderCell>Action</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {papers && papers.map(paper =>\n                                    <Table.Row key={paper.id}>\n                                        <Table.Cell>{paper.title}</Table.Cell>\n                                        <Table.Cell>{paper.researcher}</Table.Cell>\n                                        <Table.Cell>{paper.status}</Table.Cell>\n                                        <Table.Cell>\n                                            <Button secondary\n                                                icon\n                                                onClick={e => {\n                                                    setPaper(paper)\n                                                    setViewPaper(true);\n                                                }}\n                                                labelPosition='left'>\n                                                <Icon name=\"file alternate\" />\n                                                View File\n                                            </Button>\n                                        </Table.Cell>\n                                        <Table.Cell>\n                                            {journal.papers.find(p => p.id === paper.id) !== undefined ?\n                                                <Button color='red'\n                                                    icon\n                                                    animated='fade'\n                                                    onClick={e => removePaperFromJournal(paper?.id)}\n                                                    labelPosition='left'>\n                                                    <Button.Content visible>\n                                                        <Icon name=\"check\" />\n                                                    Added\n                                                </Button.Content>\n                                                    <Button.Content hidden>\n                                                        <Icon name=\"delete\" />\n                                                    Delete\n                                                </Button.Content>\n                                                </Button>\n                                                :\n                                                <Button icon\n                                                    color='violet'\n                                                    onClick={e => addPaperToJournal(paper.id)}\n                                                    labelPosition='left'>\n                                                    <Icon name=\"plus\" />\n                                                Add to journal\n                                            </Button>\n                                            }\n                                        </Table.Cell>\n                                    </Table.Row>\n                                )}\n                            </Table.Body>\n                        </Table>\n                    </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button primary onClick={() => setAddPaper(false)}>\n                        <Icon name='check' /> Done\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        {journal.papers.find(p => p.id === paper?.id) !== undefined ?\n                            <Button color='red'\n                                icon\n                                animated='fade'\n                                floated='right'\n                                onClick={e => removePaperFromJournal(paper?.id)}\n                                labelPosition='left'>\n                                <Button.Content visible>\n                                    <Icon name=\"check\" />\n                                Added\n                            </Button.Content>\n                                <Button.Content hidden>\n                                    <Icon name=\"delete\" />\n                                Delete\n                            </Button.Content>\n                            </Button>\n                            :\n                            <Button color='violet'\n                                icon\n                                floated='right'\n                                onClick={e => addPaperToJournal(paper?.id)}\n                                labelPosition='left'>\n                                <Icon name=\"plus\" />\n                            Add to journal\n                        </Button>\n                        }\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n        </Container>\n    );\n}\n\nexport default EditPublication;","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Container, Header, Loader, Table, Icon, Button, Segment, Modal, Embed } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../../store/selectors/user';\n\nimport './index.css'\n\nconst ViewPublication = () => {\n\n    let { id } = useParams();\n\n    const user = useSelector(selectUser);\n\n    const [fetch, setFetch] = useState(true);\n    const [journal, setJournal] = useState(null);\n\n    const [viewPaper, setViewPaper] = useState(false);\n    const [paper, setPaper] = useState(null);\n\n    useEffect(() => {\n        if (fetch) {\n            setFetch(false);\n            API.get(`/api/journals/${id}`).then((response) => {\n                if (response.data.journal)\n                    setJournal(response.data.journal);\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetch, id]);\n\n    if (!journal)\n        return <Container><Loader active inline='centered' /></Container>\n\n    return (\n        <Container className=\"view-user\">\n            <Header dividing>Journal Info</Header>\n            <Table definition>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell />\n                        <Table.HeaderCell>\n                            {(user.type === 'admin' || user.type === 'editor') &&\n                                <Button labelPosition='left'\n                                    floated='right'\n                                    icon\n                                    secondary\n                                    to={`/${user.type}/publications/${id}/edit`}\n                                    as={Link}\n                                    size='small'>\n                                    <Icon name='pencil' />\n                                    Edit Publication\n                                </Button>}\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>{journal.title}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Published Date</Table.Cell>\n                        <Table.Cell>{journal.published_date}</Table.Cell>\n                    </Table.Row>\n                    {(user.type === 'admin' || user.type === 'editor') &&\n                        <Table.Row>\n                            <Table.Cell>Status</Table.Cell>\n                            <Table.Cell>{journal.status}</Table.Cell>\n                        </Table.Row>}\n                    <Table.Row>\n                        <Table.Cell>Editor</Table.Cell>\n                        <Table.Cell>{journal.editor}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Editor Email</Table.Cell>\n                        <Table.Cell>{journal.editor_email}</Table.Cell>\n                    </Table.Row>\n                    {(user.type === 'admin' || user.type === 'editor') && <>\n                        <Table.Row>\n                            <Table.Cell>Admin</Table.Cell>\n                            <Table.Cell>{journal.admin}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Admin Email</Table.Cell>\n                            <Table.Cell>{journal.admin_email}</Table.Cell>\n                        </Table.Row>\n                    </>}\n                </Table.Body>\n            </Table>\n\n            { journal.papers && <>\n                <Segment clearing vertical>\n                    <Header floated='left' >Papers</Header>\n                </Segment>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Title</Table.HeaderCell>\n                            <Table.HeaderCell>Researcher</Table.HeaderCell>\n                            {(user.type === 'admin' || user.type === 'editor') && <>\n                                <Table.HeaderCell>Editor</Table.HeaderCell>\n                                <Table.HeaderCell>Metric Used</Table.HeaderCell>\n                                <Table.HeaderCell>Status</Table.HeaderCell></>}\n                            <Table.HeaderCell>File</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {journal.papers.map(paper => <Table.Row key={paper.id}>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            <Table.Cell>{paper.researcher}</Table.Cell>\n                            {(user.type === 'admin' || user.type === 'editor') && <>\n                                <Table.Cell>{paper.editor}</Table.Cell>\n                                <Table.Cell>{paper.em_name}</Table.Cell>\n                                <Table.Cell>{paper.status}</Table.Cell> </>}\n                            <Table.Cell>\n                                <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setPaper(paper)\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                    <Icon name=\"file alternate\" />\n                                View File\n                            </Button>\n                            </Table.Cell>\n                        </Table.Row>)}\n                    </Table.Body>\n                </Table>\n            </>}\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n        </Container>\n    );\n}\n\nexport default ViewPublication;","import React, { useState, useEffect } from 'react';\nimport API from '../../../../utils/API';\nimport { Container, Header, Loader, Table, Icon, Button, Segment, Modal, Embed, Message } from 'semantic-ui-react';\n\nimport './index.css'\n\nconst ViewWithdrawls = () => {\n\n\n    const [fetchPapers, setFetchPapers] = useState(true);\n    const [papers, setPapers] = useState(null);\n\n    const [viewPaper, setViewPaper] = useState(false);\n    const [paper, setPaper] = useState(null);\n\n    useEffect(() => {\n        if (fetchPapers) {\n            setFetchPapers(false);\n            API.get('/api/paper/withdrawn').then((response) => {\n                if (response.data.papers) {\n                    setPapers(response.data.papers);\n                }\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetchPapers])\n\n    const withdrawPaper = (id, approved = true) => {\n        API.post(`/api/paper/${id}/withdraw`, {\n            approved: approved\n        }).then((response) => {\n            if (response.data.success) {\n                if (approved)\n                    setPapers(papers.filter(paper => paper.id !== id));\n                else\n                    setPapers(papers.map(paper => paper.id === id ? {\n                        ...paper,\n                        withdrawal_status: 'rejected'\n                    } : paper));\n            }\n        }).catch((error) => {\n\n        })\n    }\n\n    if (!papers)\n        return <Container><Loader active inline='centered' /></Container>\n\n    return (\n        <Container className=\"edit-publication\">\n            <Header dividing>Paper withrawal requests</Header>\n            { papers && papers.length > 0 ?\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Researcher</Table.HeaderCell>\n                        <Table.HeaderCell>File</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Action</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {papers.map(paper =>\n                        <Table.Row key={paper.id}>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            <Table.Cell>{paper.researcher_email}</Table.Cell>\n                            <Table.Cell>\n                                <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setPaper(paper)\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                    <Icon name=\"file alternate\" />\n                                    {paper.file_path}\n                                </Button>\n                            </Table.Cell>\n                            <Table.Cell>{paper.status}</Table.Cell>\n                            <Table.Cell>\n                                {paper.withdrawal_status === 'rejected' ?\n                                    <Button icon\n                                        color='red'\n                                        disabled\n                                        labelPosition='left'>\n                                        <Icon name=\"remove\" />\n                                Rejected\n                            </Button>\n                                    :\n                                    <Button icon\n                                        color='red'\n                                        onClick={() => withdrawPaper(paper.id, false)}\n                                        labelPosition='left'>\n                                        <Icon name=\"remove\" />\n                                Reject\n                            </Button>}\n                                <Button icon\n                                    onClick={() => withdrawPaper(paper.id)}\n                                    color='blue'\n                                    labelPosition='left'>\n                                    <Icon name=\"check\" />\n                                Approve\n                            </Button>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table> : <Message>There are no withdrawal requests</Message>}\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`} />\n                </Modal.Content>\n            </Modal>\n\n\n        </Container>\n    );\n}\n\nexport default ViewWithdrawls;","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    useRouteMatch,\n    Redirect\n  } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport UserList from \"./components/UsersList\";\nimport ViewUser from \"./components/ViewUser\";\nimport EditUser from \"./components/EditUser\";\nimport PublicationsList from \"./components/PublicationsList\";\nimport EditPublication from \"./components/EditPublication\";\nimport ViewPublication from \"./components/ViewPublication\";\nimport ViewWithdrawls from \"./components/ViewWithdrawls\";\n\nimport './index.css';\n\nconst Admin = () => {\n\n    let { path, url } = useRouteMatch();\n\n    return (\n        <div className=\"admin\"> \n            <Navigation url={url} />\n            <div className=\"ui container middle\">\n                <Switch>\n                    <Route exact path={path}>\n                        <Redirect to = {`${path}/users`} />\n                    </Route>\n                    <Route exact path={`${path}/users`}>\n                        <UserList />\n                    </Route>\n\n                    <Route exact path={`${path}/users/:id`}>\n                        <Redirect to={`${path}/users/:id/view`} />\n                    </Route>\n                    <Route path={`${path}/users/:id/view`}>\n                        <ViewUser />\n                    </Route>\n                    <Route path={`${path}/users/:id/edit`}>\n                        <EditUser />\n                    </Route>\n\n                    <Route exact path={`${path}/publications`}>\n                        <PublicationsList />\n                    </Route>\n                    <Route path={`${path}/publications/:id/view`}>\n                        <ViewPublication />\n                    </Route>\n                    <Route path={`${path}/publications/:id/edit`}>\n                        <EditPublication />\n                    </Route>\n\n\n                    <Route path={`${path}/withdrawls`}>\n                        <ViewWithdrawls />\n                    </Route>                    \n\n                </Switch>\n            </div>\n        </div>       \n    );  \n};\n\nexport default Admin;\n","import React from \"react\";\nimport { Menu } from 'semantic-ui-react'\n\nimport UserNav from \"../../../../components/UserNav\";\nimport {\n    NavLink\n  } from \"react-router-dom\";\n\nimport './index.css';\n\nconst EditorNavigation = ({url}) => {\n\n    return (\n        <Menu>\n            <Menu.Item exact to={`${url}/papers`}\n                as={NavLink}>\n                Papers\n            </Menu.Item>\n            <Menu.Item exact to={`${url}/researchers`}\n                as={NavLink}>\n                Researchers\n            </Menu.Item>\n            <Menu.Item exact to={`${url}/reviewers`}\n                as={NavLink}>\n                Reviewers\n            </Menu.Item>\n            <Menu.Item exact to={`${url}/signups`}\n                as={NavLink}>\n                Sign-ups\n            </Menu.Item>\n            <Menu.Item exact to={`${url}/publications`}\n                as={NavLink}>\n                Publications\n            </Menu.Item>\n            <UserNav />\n        </Menu>   \n    );  \n};\n\nexport default EditorNavigation;\n","import { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\nimport { Table, Button, Icon, Modal, Header, Container, Segment, Embed} from \"semantic-ui-react\";\nimport { Link} from \"react-router-dom\";\n\n//import './index.css';\n\nconst PapersList = () => {\n\n    // create variables\n    const [fetch, setFetch] = useState(true);\n    const [papers, setPapers] = useState([]);\n    const [paper, setPaper] = useState(null);\n    const [viewPaper, setViewPaper] = useState(false);\n\n    // fetch all papers \n    useEffect(() => {\n        if (fetch) {\n            setFetch(false);\n            API.get(`/api/paper/all`).then(response => {\n                if (response.data.papers)\n                    setPapers(response.data.papers);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    }, [fetch]);\n\n    // return \n    return (\n        <Container className=\"papers-list\">\n            <Header floated='left'>View Papers</Header>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Paper Id</Table.HeaderCell>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Researcher Name</Table.HeaderCell>\n                        <Table.HeaderCell>Researcher Email</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {papers.map(paper => <Table.Row key={paper.id} >\n                            <Table.Cell>{paper.id}</Table.Cell>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            <Table.Cell>{paper.status}</Table.Cell>\n                            <Table.Cell>{paper.researcher}</Table.Cell>\n                            <Table.Cell>{paper.researcher_email}</Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setPaper(paper)\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='center'>\n                                    <Icon name=\"file alternate\" />\n                                    {paper.file_path}\n                                </Button>\n                                <Button primary animated='vertical'\n                                        to={`/editor/papers/${paper.id}/details`}\n                                        as={Link}>\n                                    <Button.Content hidden>View</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='eye' />\n                                    </Button.Content>\n                                </Button>\n                                <Button tertiary animated='vertical'\n                                        to={`/editor/papers/${paper.id}/edit`}\n                                        as={Link}>\n                                    <Button.Content hidden>Edit</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='pencil' />\n                                    </Button.Content>\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                    <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                        }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                                floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n        </Container>\n    );\n};\n\nexport default PapersList;","import { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\n\nimport { Table, Button, Icon, Header} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\n//import './index.css'\n\nconst ResearchersList= () => {\n\n    // declare variables\n    const [fetch, setFetch] = useState(true);\n    const [ users, setUsers ] = useState([]);\n\n    // fetch users method\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get('/api/users/of_type/researcher').then(response => {\n                if (response.data.users)\n                    setUsers(response.data.users);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch]);\n\n    // return \n    return (\n        <div className=\"researchers-list\">\n            <Header floated='left'>View Researchers</Header>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                { users.map(user => \n                    <Table.Row key={user.id}>\n                        <Table.Cell>{user.first_name + ' ' + user.last_name}</Table.Cell>\n                        <Table.Cell textAlign='center'>\n                            <Button primary animated='vertical'\n                                    to={`/editor/researchers/${user.id}/view`}\n                                    as={Link}>\n                                <Button.Content hidden>View</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='eye' />\n                                </Button.Content>\n                            </Button>\n                            <Button secondary animated='vertical'\n                                    to={`/editor/researchers/${user.id}/papers`}\n                                    as={Link}>\n                                <Button.Content hidden>Papers</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='file text' />\n                                </Button.Content>\n                            </Button>                                    \n                        </Table.Cell>\n                    </Table.Row>\n                )}\n                </Table.Body>\n            </Table>\n        </div>       \n    )  \n}\n\nexport default ResearchersList;","import { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\n\nimport { Table, Button, Icon, Header} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\n//import './index.css';\n\nconst ReviewersList = () => {\n\n    // declare variables\n    const [fetch, setFetch] = useState(true);\n    const [ users, setUsers ] = useState([]);\n\n    // fetch users method\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get('/api/users/of_type/reviewer').then(response => {\n                if (response.data.users)\n                    setUsers(response.data.users);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch]);\n\n\n    return (\n        <div className=\"reviewers-list\">\n            <Header floated='left'>View Reviewers</Header>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                { users.map(user => \n                    <Table.Row key={user.id}>\n                        <Table.Cell>{user.first_name + ' ' + user.last_name}</Table.Cell>\n                        <Table.Cell textAlign='center'>\n                            <Button primary animated='vertical'\n                                    to={`/editor/reviewers/${user.id}/view`}\n                                    as={Link}>\n                                <Button.Content hidden>View</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='eye' />\n                                </Button.Content>\n                            </Button>\n                            <Button secondary animated='vertical'\n                                    to={`/editor/reviewers/${user.id}/papers`}\n                                    as={Link}>\n                                <Button.Content hidden>Papers</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='file text' />\n                                </Button.Content>\n                            </Button>                                    \n                        </Table.Cell>\n                    </Table.Row>\n                )}\n                </Table.Body>\n            </Table>\n        </div>       \n    );  \n};\n\nexport default ReviewersList;","import { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\n\nimport { Table, Button, Icon, Modal, Header, Container} from \"semantic-ui-react\";\n\nconst SignupsList = () => {\n    // declare variables\n    const [fetch, setFetch] = useState(true);\n    const [ users, setUsers ] = useState([]);\n    const [ open, setOpen ] = useState(false);\n    const [ currentDelete, setCurrentDelete ] = useState(null);\n\n    // fetch users method\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get('/api/users/signups').then(response => {\n                if (response.data.users)\n                    setUsers(response.data.users);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch]);\n\n    // \n    const addUser = id => {\n        API.post(`/api/users/${id}/change_status`).then((response) => {\n            if (response.data.success) {\n                setUsers(users.filter(user => user.id !== id));\n            }\n        }).catch((error) => {\n            console.error(error);\n        })\n    }\n\n    const removeUser = id => {\n        API.post(`/api/users/${id}/remove`).then((response) => {\n            if (response.data.success) {\n                setCurrentDelete(null);\n                setUsers(users.filter(user => user.id !== id));\n            }\n        }).catch((error) => {\n            console.error(error);\n        })\n    }\n\n    return (\n        <div className=\"signups-list\">\n            <Header floated='left'>View Signups</Header>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Type</Table.HeaderCell>\n                        <Table.HeaderCell>Satus</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell>Admin Email</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                { users.map(user => \n                    <Table.Row key={user.id}>\n                        <Table.Cell>{user.first_name + ' ' + user.last_name}</Table.Cell>\n                        <Table.Cell>{user.type}</Table.Cell>\n                        <Table.Cell>{user.status}</Table.Cell>\n                        <Table.Cell>{user.email}</Table.Cell>\n                        <Table.Cell>{user.admin_email}</Table.Cell>\n                        <Table.Cell textAlign='center'>\n                            <Button color='green' animated='vertical'\n                                onClick={(e) => {\n                                    addUser(user.id);\n                                }}>\n                                <Button.Content hidden>Add</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='checkmark' />\n                                </Button.Content>\n                            </Button>\n                            <Button color='red' animated='vertical'\n                                onClick={(e) => {\n                                    setOpen(true);\n                                    setCurrentDelete({\n                                        firstname:user.first_name,\n                                        last_name:user.last_name,\n                                        id:user.id\n                                    });\n                                }}>\n                                <Button.Content hidden>Remove</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='x' />\n                                </Button.Content>\n                            </Button>                                    \n                        </Table.Cell>\n                    </Table.Row>\n                )}\n                </Table.Body>\n            </Table>\n            <Modal\n                basic\n                onClose={() => setOpen(false)}\n                onOpen={() => setOpen(true)}\n                open={open}\n                dimmer='blurring'\n                size='small'>\n                <Header icon textAlign='center'>\n                    <Icon name='book' />\n                    Remove user {currentDelete?.firstname + ' ' + currentDelete?.last_name}?\n                </Header>\n                <Modal.Content>\n                    <Container textAlign='center'>\n                    <p className=\"align center\">\n                        This will permanently remove the user and all of their related data.\n                    </p>\n                    </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button color='blue' inverted onClick={() => setOpen(false)}>\n                        <Icon name='remove' /> No\n                    </Button>\n                    <Button color='red' inverted onClick={() => {\n                        setOpen(false);\n                        removeUser(currentDelete?.id)\n                        setCurrentDelete(null);\n                    }}>\n                        <Icon name='checkmark' /> Yes\n                    </Button>\n                </Modal.Actions>\n            </Modal> \n        </div>       \n    );  \n};\n\nexport default SignupsList;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Container, Header, Loader, Table} from 'semantic-ui-react';\n\n//import './index.css';\n\nconst ViewResearcher = () => {\n\n    // declare variables\n    let { id } = useParams();\n\n    const [fetch, setFetch ] = useState(true);\n    const [fetchDegrees, setFetchDegrees ] = useState(false);\n    const [ user, setUser ] = useState(null);\n    const [ degrees, setDegrees ] = useState([]);\n\n    // fetch user method\n    useEffect(() => {\n        if(fetch){\n            setFetch(false);\n            API.get(`/api/users/${id}`).then((response) => {\n                if (response.data.user) {\n                    setUser(response.data.user);\n\n                    if (response.data.user.type === 'researcher')\n                        setFetchDegrees(true);\n                }\n\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    },[fetch, id]);\n\n    // fetch degrees\n    useEffect(() => {\n        if (fetchDegrees && user?.type === 'researcher') {\n            setFetchDegrees(false);\n            API.get(`/api/users/${id}/degrees`).then((response => {\n                if (response.data.degrees)\n                    setDegrees(response.data.degrees);\n            })).catch((err) => {\n\n            })\n        }\n\n    }, [user, fetchDegrees, id]);\n\n    // loading\n    if (!user)\n        return <Container><Loader active inline='centered' /></Container>\n\n    // return \n    return (\n        <Container className=\"view-researcher\">\n            <Header dividing>User Info</Header>\n                <Table definition>\n                    <Table.Body>\n                        <Table.Row>\n                            <Table.Cell>First Name</Table.Cell>\n                            <Table.Cell>{user.first_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Last Name</Table.Cell>\n                            <Table.Cell>{user.last_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Type</Table.Cell>\n                            <Table.Cell>{user.type}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Status</Table.Cell>\n                            <Table.Cell>{user.status}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Email</Table.Cell>\n                            <Table.Cell>{user.email}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>ID</Table.Cell>\n                            <Table.Cell>{user.id}</Table.Cell>\n                        </Table.Row>\n                        { user.admin_email && <Table.Row>\n                            <Table.Cell>Admin Email</Table.Cell>\n                            <Table.Cell>{user.admin_email}</Table.Cell>\n                        </Table.Row>}\n                    </Table.Body>\n                </Table>\n\n            { user.type === \"researcher\" && <>\n            <Header dividing>Degrees</Header>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Intitution</Table.HeaderCell>\n                        <Table.HeaderCell>Received</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    { degrees.map(degree => <Table.Row>\n                        <Table.Cell>{degree.title}</Table.Cell>\n                        <Table.Cell>{degree.institution}</Table.Cell>\n                        <Table.Cell>{degree.received}</Table.Cell>\n                    </Table.Row>)}\n                </Table.Body>\n            </Table>\n            </>}\n        </Container>       \n    );  \n}\n\nexport default ViewResearcher;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Container, Header, Loader, Table} from 'semantic-ui-react';\n\n//import './index.css';\n\nconst ViewReviewer = () => {\n\n    // declare variables\n    let { id } = useParams();\n\n    const [fetch, setFetch ] = useState(true);\n    const [ user, setUser ] = useState(null);\n\n    // fetch user method\n    useEffect(() => {\n        if(fetch){\n            setFetch(false);\n            API.get(`/api/users/${id}`).then((response) => {\n                if (response.data.user) {\n                    setUser(response.data.user);\n                }\n\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    },[fetch, id]);\n\n    // loading\n    if (!user)\n        return <Container><Loader active inline='centered' /></Container>\n\n    // return\n    return (\n        <Container className=\"view-reviewer\">\n            <Header dividing>User Info</Header>\n                <Table definition>\n                    <Table.Body>\n                        <Table.Row>\n                            <Table.Cell>First Name</Table.Cell>\n                            <Table.Cell>{user.first_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Last Name</Table.Cell>\n                            <Table.Cell>{user.last_name}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Type</Table.Cell>\n                            <Table.Cell>{user.type}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Status</Table.Cell>\n                            <Table.Cell>{user.status}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Email</Table.Cell>\n                            <Table.Cell>{user.email}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>ID</Table.Cell>\n                            <Table.Cell>{user.id}</Table.Cell>\n                        </Table.Row>\n                        { user.admin_email && <Table.Row>\n                            <Table.Cell>Admin Email</Table.Cell>\n                            <Table.Cell>{user.admin_email}</Table.Cell>\n                        </Table.Row>}\n                    </Table.Body>\n                </Table>\n        </Container>       \n    );  \n};\n\nexport default ViewReviewer;","\nconst ViewSignup = () => {\n    return (\n        <div className=\"view-signup\">\n           view_signup\n        </div>       \n    );  \n};\n\nexport default ViewSignup;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Link} from \"react-router-dom\";\nimport { Container, Header, Table, Icon, Button, Segment, Modal, \n    Loader, Embed} from \"semantic-ui-react\";\n\nimport './index.css';\n\nconst ViewPapersRes = () => {\n\n    // create variables\n    const [fetch, setFetch] = useState(true);\n    const [ papers, setPapers] = useState([]);\n    const [ viewPaper, setViewPaper ] = useState(false);\n    const [ paper, setPaper ] = useState(null);\n    let {id} = useParams();   // func = hook\n\n    // fetch all papers by the researcher\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get(`/api/paper/by_researcher/${id}`).then(response => {\n                if (response.data.papers)\n                    setPapers(response.data.papers);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch, id]);\n\n    // return \n    if (!papers) {\n        return (\n            <Container>\n                <Loader />\n            </Container>\n        )\n    }\n\n    return (\n        <Container className=\"view-papers-res\">\n            <Header floated='left'>View Papers By Researcher</Header>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Paper Id</Table.HeaderCell>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>File</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {papers.map(paper => <Table.Row key={paper.id}>\n                            <Table.Cell>{paper.id}</Table.Cell>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            <Table.Cell>{paper.status}</Table.Cell>\n                            <Table.Cell>\n                                <Button secondary\n                                        icon\n                                        onClick={e => {\n                                            setPaper(paper)\n                                            setViewPaper(true);\n                                        }}\n                                        labelPosition='center'>\n                                    <Icon name=\"file alternate\" />\n                                    {paper.file_path}\n                                </Button>                                \n                            </Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                <Button primary animated='vertical'\n                                        to={`/editor/papers/${paper.id}/details`}\n                                        as={Link}>\n                                    <Button.Content hidden>View</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='eye' />\n                                    </Button.Content>\n                                </Button>\n                                <Button tertiary animated='vertical'\n                                        to={`/editor/papers/${paper.id}/edit`}\n                                        as={Link}>\n                                    <Button.Content hidden>Edit</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='pencil' />\n                                    </Button.Content>\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>)}\n                </Table.Body>\n            </Table>\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                    <Button primary \n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                        }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                                floated='left'>\n                            { paper?.title }\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>       \n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />                    \n                </Modal.Content>\n            </Modal> \n        </Container>      \n    );  \n};\n\nexport default ViewPapersRes;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport API from '../../../../utils/API';\nimport { Link} from \"react-router-dom\";\nimport { Container, Header, Table, Icon, Button, Segment, Modal, Embed} from \"semantic-ui-react\";\n\nimport './index.css';\n\nconst ViewPapersRev = () => {\n\n    // create variables\n    const [fetch, setFetch] = useState(true);\n    const [assigneds, setAssigneds] = useState([]);\n    const [assign, setAssign] = useState(null);\n    const [viewAssign, setViewAssign] = useState(false);\n    let {id} = useParams();   // func = hook\n\n    // fetch all papers by the researcher\n    useEffect(() => {\n        if(fetch) {\n            setFetch(false);\n            API.get(`/api/assigned/reviewer/${id}`).then(response => {\n                if (response.data.assigneds)\n                    setAssigneds(response.data.assigneds);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    },[fetch, id]);\n\n    // return \n    return (\n        <Container className=\"view-papers-rev\">\n            <Header floated='left'>View Papers Assigned to Reviewer</Header>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Paper Id</Table.HeaderCell>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Researcher Email</Table.HeaderCell>\n                        <Table.HeaderCell>Revision Deadline</Table.HeaderCell>\n                        <Table.HeaderCell>File</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {assigneds.map(assign => <Table.Row key={assign.id}>\n                            <Table.Cell>{assign.paper_id}</Table.Cell>\n                            <Table.Cell>{assign.title}</Table.Cell>\n                            <Table.Cell>{assign.status}</Table.Cell>\n                            <Table.Cell>{assign.researcher_email}</Table.Cell>\n                            <Table.Cell>{assign.revision_deadline}</Table.Cell>\n                            <Table.Cell>\n                                <Button secondary\n                                        icon\n                                        onClick={e => {\n                                            setAssign(assign)\n                                            setViewAssign(true);\n                                        }}\n                                        labelPosition='center'>\n                                    <Icon name=\"file alternate\" />\n                                    {assign.file_path}\n                                </Button>                                \n                            </Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                <Button primary animated='vertical'\n                                        to={`/editor/papers/${assign.paper_id}/details`}\n                                        as={Link}>\n                                    <Button.Content hidden>View</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='eye' />\n                                    </Button.Content>\n                                </Button>\n                                <Button tertiary animated='vertical'\n                                        to={`/editor/papers/${assign.paper_id}/edit`}\n                                        as={Link}>\n                                    <Button.Content hidden>Edit</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='pencil' />\n                                    </Button.Content>\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>)}\n                </Table.Body>\n            </Table>\n\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewAssign(false)}\n                onOpen={() => setViewAssign(true)}\n                open={viewAssign}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                    <Button primary \n                            floated='right'\n                            onClick={(e) => {\n                                setViewAssign(false);\n                                setAssign(null);\n                        }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                                floated='left'>\n                            { assign?.title }\n                            <Header.Subheader>\n                                {assign?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>       \n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${assign?.file_path}`}\n                    />                    \n                </Modal.Content>\n            </Modal> \n\n        </Container>  \n\n    );  \n};\n\nexport default ViewPapersRev;","import React from \"react\";\n\nimport './index.css';\n\nimport { Step } from 'semantic-ui-react';\n\nconst PaperStatus = ({ status='', edit=null}) => {\n\n\n\n    return (\n        <Step.Group>\n            <Step active={status === 'pending_assignment'}\n                link={edit ? true : false}\n                onClick={e => edit && edit ('pending_assignment') }>\n                <Step.Content>\n                    <Step.Title>Pending Assignment</Step.Title>\n                    <Step.Description>Waiting to be assigned an evaluation metric</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step  active={status === 'pending_revision'}\n                link={edit ? true : false}\n                onClick={e => edit && edit ('pending_revision') }>\n                <Step.Content>\n                    <Step.Title>Pending Revision</Step.Title>\n                    <Step.Description>Waiting to be reviewed by reviewers</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step  active={status === 'pending_publication'}                \n                link={edit ? true : false}\n                onClick={e => edit && edit ('pending_publication') }>\n                <Step.Content>\n                    <Step.Title>Pending Publication</Step.Title>\n                    <Step.Description>Waiting to be published</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step  active={status === 'published'}            \n                link={edit ? true : false}\n                onClick={e => edit && edit ('published') }>\n                <Step.Content>\n                    <Step.Title>Published</Step.Title>\n                    <Step.Description>Published onto a journal!</Step.Description>\n                </Step.Content>\n            </Step>\n        </Step.Group>\n    );  \n};\n\nexport default PaperStatus;\n","import { useState, useEffect } from \"react\";\nimport API from '../../../../utils/API';\nimport { Table, Button, Icon, Modal, Header, Container, Segment, \n    Embed, Loader, Divider, Card} from \"semantic-ui-react\";\nimport { Link, useParams} from \"react-router-dom\";\nimport PaperStatus from \"../../../../components/PaperStatus\";\n\n//import './index.css';\n\nconst PaperDetails = () => {\n\n    // create variables\n    const [fetch, setFetch] = useState(true);\n    const [paper, setPaper] = useState([]);\n    const [assigned, setAssigned] = useState([]);\n    const [nominated, setNominated] = useState([]);\n    const [ viewPaper, setViewPaper ] = useState(false);\n    const [evaluationMetric, setEvaluationMetric] = useState(null);\n    const [withdrawn, setWithdrawn] = useState(false);\n    let {id} = useParams(); \n\n    // fetch all papers \n    useEffect(() => {\n        if (fetch) {\n            setFetch(false);\n            API.get(`/api/paper/${id}`).then(response => {\n                if (response.data.paper)\n                    setPaper(response.data.paper);\n                if (response.data.nominated)\n                    setNominated(response.data.nominated);\n                if (response.data.assigned)\n                    setAssigned(response.data.assigned);\n            }).catch(error => {\n                console.log(error);\n            })\n        }\n    }, [fetch, id]);\n\n    // return \n    if (!paper) \n        return (\n            <Container><Loader active inline='centered' /></Container>\n        )\n    return (\n        <Container className=\"paper-details\">\n            <Segment clearing vertical>\n                <Header floated='left' >Paper Info</Header>\n                <Button floated='right'\n                        icon\n                        secondary\n                        to={`/editor/papers/${id}/edit`}\n                        as={Link}\n                        labelPosition='left'\n                        size='small'>\n                    <Icon name='plus' />\n                    Edit Paper\n                </Button>\n            </Segment>\n            <Table definition>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Paper Id</Table.Cell>\n                        <Table.Cell>{paper.id}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>{paper.title}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Status</Table.Cell>\n                        <Table.Cell>\n                            <PaperStatus status={paper.status} />\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Researcher Name</Table.Cell>\n                        <Table.Cell>{paper.researcher}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Researcher Email</Table.Cell>\n                        <Table.Cell>{paper.researcher_email}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>File</Table.Cell>\n                        <Table.Cell>\n                            <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                <Icon name=\"file alternate\" />\n                                View File\n                            </Button>\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n            <Divider />\n            <Segment clearing vertical>\n                <Header>Evaluation Metric: {evaluationMetric?.name}</Header>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {evaluationMetric?.questions.map(metric =>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{metric.question}</Card.Header>\n                            <Card.Meta>\n                                <span>{metric.answer_type}</span>\n                            </Card.Meta>\n\n                        </Card.Content>\n                    </Card>)}\n            </Card.Group>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Nominated Reviewers</Header>\n            </Segment>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {nominated && nominated.map(user => \n                        <Table.Row key={user.id}>\n                            <Table.Cell>{user.reviewer}</Table.Cell>\n                            <Table.Cell>{user.reviewer_email}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Assigned Reviewers</Header>\n            </Segment>\n            <Table >\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {assigned && assigned.map(user => \n                        <Table.Row key={user.id}>\n                            <Table.Cell>{user.reviewer}</Table.Cell>\n                            <Table.Cell>{user.reviewer_email}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                    <Button primary \n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                        }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                                floated='left'>\n                            { paper?.title }\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>       \n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />                    \n                </Modal.Content>\n            </Modal>\n        </Container>\n    );\n};\n\nexport default PaperDetails;","import { useState, useEffect } from \"react\";\nimport {Container, Header, Button, Segment, Icon, Table, Divider, Modal, \n    Embed, Loader, Card, Form} from 'semantic-ui-react'\nimport {useParams} from 'react-router-dom'\nimport API from \"../../../../utils/API\";\nimport PaperStatus from \"../../../../components/PaperStatus\"\n\nconst EditPaper = () => {\n    // varaibles\n    let { id } = useParams();       // get id of current paper\n\n    const [fetchPaper, setFetchPaper] = useState(true);         // initially fetch paper\n    const [paper, setPaper] = useState(null);\n    const [nominated, setNominated] = useState(null);                       // store nominated\n    const [deleteRevDetails, setDeleteRevDetails] = useState(null);         // store rev to delete details\n    const [assigned, setAssigned] = useState(null);                         // store assigned\n\n    const [viewPaper, setViewPaper] = useState(false);                  // view paper pdf\n    const [reviewers, setReviewers] = useState(null);\n\n    const [removeNomi, setRemoveNomi] = useState(false);            // remove nominated rev\n    const [removeAssigned, setRemoveAssigned] = useState(false);    // remove assigned rev\n    const [action, setAction] = useState(null);\n    const [openConfirmation, setOpenConfirmation] = useState(false);\n    const [evaluationMetric, setEvaluationMetric] = useState(null);\n    const [withdrawn, setWithdrawn] = useState(false);\n    const [error, setError] = useState({});\n    const [changed, setChanged] = useState({});\n    const [fetchReviewers, setFetchReviewers] = useState(false);\n    const [nominateReviewer, setNominateReviewer] = useState(false);\n    const [reviewer, setReviewer] = useState(null);\n\n    // fetch paper\n    useEffect(() => {\n        if (fetchPaper) {\n            setFetchPaper(false);\n            API.get(`/api/paper/${id}`).then(response => {\n                if (response.data.paper)\n                    setPaper(response.data.paper);\n                if (response.data.nominated)\n                    setNominated(response.data.nominated.map(nominee => \n                        response.data.assigned.find(assinee => assinee.reviewer_id===nominee.reviewer_id) ? ({\n                            ...nominee,\n                            assigned: true\n                        }):nominee));\n                if (response.data.assigned)\n                    setAssigned(response.data.assigned);\n                if (response.data.withdraw)\n                    setWithdrawn(response.data.withdraw);\n                if (response.data.evaluation_metric)\n                    setEvaluationMetric(response.data.evaluation_metric)\n                setFetchReviewers(true);\n            }).catch((error) => {\n                console.error(error);\n            })\n        }\n    }, [fetchPaper, id])\n\n    useEffect(() => {\n        if ( fetchReviewers) {\n            setFetchReviewers(false);\n            API.get(`/api/users/of_type/reviewer`).then(response => {\n                if (response.data.users) {\n                    setReviewers(response.data.users\n                        .filter(user => assigned.find(nominee => nominee.reviewer_email === user.email) === undefined)\n                        .filter(user => nominated.find(nominee => nominee.reviewer_email === user.email) === undefined)\n                        .map(user => ({\n                            key: user.email,\n                            text: user.first_name + ' ' + user.last_name,\n                            value: user.email\n                        })))\n                }\n            }).catch(error => {\n\n            })\n        }\n    }, [assigned, fetchReviewers, id, nominated])\n\n    // remove nominated/assigned reviewer\n    const removeRev = (deleteRev) => {\n        if(removeNomi) {\n            // remove nomi\n            API.post(`/api/nominated/remove`, {\n                paper_id: deleteRev.paper_id,\n                reviewer_email: deleteRev.email\n            }).then(response => {\n                if (response.data.success) {\n                    setFetchPaper(true);\n                    setRemoveNomi(false);\n                }\n            }).catch((error => {\n                console.error(error.response);\n            }))\n\n        } else if (removeAssigned) {\n            // remove assigned\n            API.post(`/api/assigned/remove`, {\n                paper_id: deleteRev.paper_id,\n                reviewer_email: deleteRev.email\n            }).then(response => {\n                if (response.data.success) {\n                    setFetchPaper(true);\n                    setRemoveAssigned(false);\n                }\n            }).catch((error => {\n                console.error(error.response);\n            }))\n            \n        } \n    }\n\n    // approve nominated reviewer\n    const approveNomiRevMethod = (approveNomiRev) => {\n        // add to assign\n        API.post('/api/assigned/new', {\n            paper_id: approveNomiRev.paper_id,\n            researcher_email: approveNomiRev.researcher_email,\n            reviewer_email: approveNomiRev.reviewer_email,\n            revision_deadline: approveNomiRev.revision_deadline,\n        }).then(respomse => {\n            if (respomse.data.success) {               \n                setFetchPaper(true);\n            }\n        }).catch((error => {\n            console.error(error.response);\n        }))\n    }\n\n    const handleChange = (e, { name, value }) => {\n        setPaper({\n            ...paper,\n            [name]: value\n        });\n\n\n        setChanged({\n            ...changed,\n            [name]: value\n        })\n    }\n\n    const saveField = (name, value) => {\n        API.post(`/api/paper/${id}/edit`,{\n            [name]:value\n        }).then(response => {\n            if (response.data.success)\n                setChanged({\n                    ...changed,\n                    [name]: false\n                });\n                setPaper({\n                    ...paper,\n                    [name]:value\n                });\n        }).catch(err => {\n\n        })\n    }\n\n    const newNominatedReviewer = () => {\n        API.post(`/api/assigned/new`, \n        {\n            paper_id: paper.id,\n            researcher_email: paper.researcher_email,\n            reviewer_email: reviewer,\n            revision_deadline: '2021-05-23',\n        }).then(response => {\n            if (response.data.success) {\n                setReviewer(null);\n                setNominateReviewer(false);\n                if (response.data.assigned) {\n                    setAssigned([...assigned, response.data.assigned]);\n                    console.log(reviewers)\n                    console.log(response.data.nominated)\n                    setReviewers(reviewers.filter(reviewer => reviewer.key !== response.data.assigned.reviewer_email))\n                }\n            }\n        }).catch((error => {\n            console.error(error.response);\n        }))\n    }\n\n    const handleReviewerChange = (e, { name, value }) => {\n        setReviewer(value);\n    }\n\n    // return \n    if (!paper) {\n        return (\n            <Container>\n                <Loader />\n            </Container>\n        )\n    }\n\n    return (\n        <Container>\n            <Segment clearing vertical>\n                <Header floated='left' >Edit Paper</Header>\n            </Segment>\n            <Table definition>\n                <Table.Body> \n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Title\"\n                                    name=\"title\"\n                                    value={paper.title}\n                                    onChange={handleChange}\n                                    error={error && error.title &&\n                                    {\n                                        content: error.title.join(' & '),\n                                        pointing: 'left'\n                                    }}\n                                    icon={ changed?.title && {\n                                        name: 'save',\n                                        circular: true,\n                                        link: true,\n                                        onClick: e => saveField('title', paper.title)\n                                    }} />\n                            </Form.Field>\n                            </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Status</Table.Cell>\n                        <Table.Cell>\n                            <PaperStatus status={paper.status}\n                                        edit={(status) => saveField('status', status)} />\n                        </Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Researcher</Table.Cell>\n                        <Table.Cell>{paper.researcher}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Researcher Email</Table.Cell>\n                        <Table.Cell>{paper.researcher_email}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>File</Table.Cell>\n                        <Table.Cell> \n                            <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                <Icon name=\"file alternate\" />\n                                    View File\n                            </Button>\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n            <Divider />\n            <Segment clearing vertical>\n                <Header>Evaluation Metric: {evaluationMetric?.name}</Header>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {evaluationMetric?.questions.map(metric =>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{metric.question}</Card.Header>\n                            <Card.Meta>\n                                <span>{metric.answer_type}</span>\n                            </Card.Meta>\n\n                        </Card.Content>\n                    </Card>)}\n            </Card.Group>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Nominated Reviewers</Header>\n            </Segment>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell textAlign='center'>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {nominated && nominated.map(nomi => \n                        <Table.Row key={nomi.id}>\n                            <Table.Cell>{nomi.reviewer}</Table.Cell>\n                            <Table.Cell>{nomi.reviewer_email}</Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                {!nomi.assigned && <> \n                                <Button color='green' animated='vertical'\n                                        onClick={(e) => {\n                                            approveNomiRevMethod({\n                                                paper_id: paper.id,\n                                                researcher_email: paper.researcher_email,\n                                                reviewer_email: nomi.reviewer_email,\n                                                revision_deadline: '2021-01-02'\n                                            });\n                                        }}>\n                                    <Button.Content hidden>Add</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='checkmark' />\n                                    </Button.Content>\n                                </Button>\n                                <Button color='red' animated='vertical'\n                                        onClick={(e) => {\n                                            setDeleteRevDetails({\n                                                name: nomi.reviewer,\n                                                email: nomi.reviewer_email,\n                                                paper_id: paper.id,\n                                                user_id: nomi.id\n                                            });\n                                            setRemoveNomi(true);\n                                            setAction({\n                                                action: 'Are you sure you want to reject the nominated reviewer:'\n                                            });\n                                            setOpenConfirmation(true);\n                                        }}>\n                                    <Button.Content hidden>Remove</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='x' />\n                                    </Button.Content>\n                                </Button> \n                                </>}                                    \n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Assigned Reviewers</Header>\n                {nominateReviewer ?\n                        <Button floated='right'\n                            icon\n                            color='green'\n                            onClick={e => newNominatedReviewer()}\n                            labelPosition='left'\n                            size='small'>\n                            <Icon name='save' />\n                    Assign this reviewer\n                </Button>\n                        :\n\n                        <Button floated='right'\n                            icon\n                            primary\n                            onClick={e => setNominateReviewer(true)}\n                            labelPosition='left'\n                            size='small'>\n                            <Icon name='plus' />\n                    Assign Reviewer\n                </Button>}\n            </Segment>\n            <Table celled >\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell textAlign='center'>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {nominateReviewer && <Table.Row>\n                        <Table.Cell>\n                            <Form.Select placeholder=\"Reviewer\"\n                                name=\"reviewer\"\n                                search\n                                value={reviewer}\n                                onChange={handleReviewerChange}\n                                options={reviewers} />\n                        </Table.Cell>\n                        <Table.Cell>\n                            {reviewer && reviewer}\n                        </Table.Cell>\n                    </Table.Row>}\n                    {assigned && assigned.map(assign => \n                        <Table.Row key={assign.id}>\n                            <Table.Cell>{assign.reviewer}</Table.Cell>\n                            <Table.Cell>{assign.reviewer_email}</Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                <Button color='red' animated='vertical'\n                                        onClick={(e) => {\n                                            setDeleteRevDetails({\n                                                name: assign.reviewer,\n                                                email: assign.reviewer_email,\n                                                user_id: assign.id,\n                                                paper_id: paper.id\n                                            });\n                                            setRemoveAssigned(true);\n                                            setAction({\n                                                action: 'Are you sure you want to remove the assigned reviewer:'\n                                            })\n                                            setOpenConfirmation(true);\n                                        }}>\n                                    <Button.Content hidden>Remove</Button.Content>\n                                    <Button.Content visible>\n                                        <Icon name='x' />\n                                    </Button.Content>\n                                </Button>                                     \n                        </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Modal\n                basic\n                onClose={() => setOpenConfirmation(false)}\n                onOpen={() => setOpenConfirmation(true)}\n                open={openConfirmation}\n                dimmer='blurring'\n                size='small'>\n                <Header icon textAlign='center'>\n                    <Icon name='book' />\n                   {action?.action} {deleteRevDetails?.name}\n                </Header>\n                <Modal.Content>\n                    <Container textAlign='center'>\n                    <p className=\"align center\">\n                        This will remove the reviewer from the paper.\n                    </p>\n                    </Container>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button color='blue' inverted onClick={() => setOpenConfirmation(false)}>\n                        <Icon name='remove' /> No\n                    </Button>\n                    <Button color='red' inverted onClick={() => {\n                        removeRev(deleteRevDetails);\n                        setOpenConfirmation(false);\n                    }}>\n                        <Icon name='checkmark' /> Yes\n                    </Button>\n                </Modal.Actions>\n            </Modal> \n        </Container>\n    );\n}\n\nexport default EditPaper;","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    useRouteMatch,\n    Redirect\n  } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport PapersList from \"./components/PapersList\";\nimport ResearchersList from \"./components/ResearchersList\"\nimport ReviewersList from \"./components/ReviewersList\"\nimport SignupsList from \"./components/SignupsList\"\n\nimport ViewResearcher from \"./components/ViewResearcher\"\nimport ViewReviewer from \"./components/ViewReviewer\"\nimport ViewSignup from \"./components/ViewSignup\"\n\nimport ViewPapersRes from \"./components/ViewPapersRes\"\nimport ViewPapersRev from \"./components/ViewPapersRev\"\nimport PaperDetails from \"./components/PaperDetails\";\nimport EditPaper from \"./components/EditPaper\";\n\nimport ViewPublication from \"../Admin/components/ViewPublication\";\nimport EditPublication from \"../Admin/components/EditPublication\";\nimport PublicationsList from \"../Admin/components/PublicationsList\";\n\nimport './index.css';\n\nconst Editor = () => {\n\n    let { path, url } = useRouteMatch();\n\n    return (\n        <div className=\"editor\">\n            <Navigation url={url} />\n            <div className=\"ui container middle\">\n                <Switch>\n                    \n                    <Route exact path={path}>\n                        <Redirect to={`${path}/papers`} />\n                    </Route>\n\n                    \n                    <Route exact path={`${path}/papers`}>\n                        <PapersList />\n                    </Route>\n                    <Route exact path={`${path}/papers/:id`}>\n                        <Redirect to={`${path}/papers/:id/details`} />\n                    </Route>\n                    <Route path={`${path}/papers/:id/details`}>\n                        <PaperDetails />\n                    </Route>\n                    <Route path={`${path}/papers/:id/edit`}>\n                        <EditPaper />\n                    </Route>\n                    \n                    \n                    <Route exact path={`${path}/researchers`}>\n                        <ResearchersList />\n                    </Route>\n                    <Route exact path={`${path}/researchers/:id`}>\n                        <Redirect to={`${path}/researchers/:id/view`} />\n                    </Route>\n                    <Route path={`${path}/researchers/:id/view`}>\n                        <ViewResearcher />\n                    </Route>\n                    <Route path={`${path}/researchers/:id/papers`}>\n                        <ViewPapersRes />\n                    </Route>\n\n\n                    <Route exact path={`${path}/reviewers`}>\n                        <ReviewersList />\n                    </Route>\n                    <Route exact path={`${path}/reviewers/:id`}>\n                        <Redirect to={`${path}/reviewers/:id/view`} />\n                    </Route>\n                    <Route path={`${path}/reviewers/:id/view`}>\n                        <ViewReviewer />\n                    </Route>\n                    <Route path={`${path}/reviewers/:id/papers`}>\n                        <ViewPapersRev />\n                    </Route>\n\n\n                    <Route exact path={`${path}/signups`}>\n                        <SignupsList />\n                    </Route>\n                    <Route exact path={`${path}/signups/:id`}>\n                        <Redirect to={`${path}/signups/:id/view`} />\n                    </Route>\n                    <Route path={`${path}/signups/:id/view`}>\n                        <ViewSignup />\n                    </Route>\n\n\n                    <Route exact path={`${path}/publications`}>\n                        <PublicationsList />\n                    </Route>\n                    <Route exact path={`${path}/publications/:id`}>\n                        <Redirect to={`${path}/publications/:id/view`} />\n                    </Route>\n                    <Route path={`${path}/publications/:id/view`}>\n                        <ViewPublication />\n                    </Route>\n                    <Route path={`${path}/publications/:id/edit`}>\n                        <EditPublication />\n                    </Route>\n                </Switch>\n            </div>\n        </div>       \n    );  \n};\n\nexport default Editor;\n","import React from \"react\";\nimport { Menu } from 'semantic-ui-react'\n\nimport UserNav from \"../../../../components/UserNav\";\nimport {\n    NavLink\n  } from \"react-router-dom\";\n\nimport './index.css';\n\nconst ResearcherNavigation = ({url}) => {\n\n    return (\n        <Menu>\n            <Menu.Item to={`${url}/papers`}\n                as={NavLink}>\n                My Papers\n            </Menu.Item>\n            <Menu.Item to={`${url}/publications`}\n                as={NavLink}>\n                Publications\n            </Menu.Item>\n            <UserNav />\n        </Menu>   \n    );  \n};\n\nexport default ResearcherNavigation;\n","import React, { useState, useEffect } from 'react';\nimport { \n    Container,\n    Header,\n    Button,\n    Segment,\n    Icon,\n    Loader,\n    Table,\n    Embed,\n    Modal\n } from 'semantic-ui-react';\n\n import { \n     Link\n } from 'react-router-dom'\n\n import { useSelector } from 'react-redux';\n import { selectUser } from '../../../../store/selectors/user'\n\nimport API from '../../../../utils/API';\n\nconst ViewPapers = () => {\n\n    const user = useSelector(selectUser);\n\n    const [ fetchPapers, setFetchPapers ] = useState(true);\n    const [ papers, setPapers] = useState(null)\n    \n    const [ viewPaper, setViewPaper ] = useState(false);\n    const [ paper, setPaper ] = useState(null);\n\n    useEffect(() => {\n        if (fetchPapers) {\n            setFetchPapers(false);\n            API.get(`/api/paper/all`).then(response => {\n                if (response.data.papers)\n                    setPapers(response.data.papers)\n\n            }).catch(err => {\n                console.error(err)\n            })\n        }\n    }, [fetchPapers])\n\n    if (!papers) \n        return (\n            <Container className=\"view-papers\">\n                <Loader />\n            </Container>\n        )\n    return (\n        <Container className='view-papers'>\n            <Segment clearing vertical>\n                <Header floated='left'>\n                    My Papers { user.type === 'reviewer' && 'to review'}\n                </Header>\n                { user.type === 'researcher' && \n                <Button floated='right'\n                        primary \n                        as={Link}\n                        to='/researcher/papers/new/edit'\n                        icon    \n                        labelPosition='left'>\n                    <Icon name='plus' />\n                    Submit a paper\n                </Button> }\n            </Segment>\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Title</Table.HeaderCell>\n                        { user.type === 'reviewer' ? <>\n                        <Table.HeaderCell>Minor Review Deadline</Table.HeaderCell> \n                        <Table.HeaderCell>Major Review Deadline</Table.HeaderCell> </>: \n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        }\n                        <Table.HeaderCell>File</Table.HeaderCell>\n                        <Table.HeaderCell>Action</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    { papers.map(paper => \n                        <Table.Row key={paper.id}>\n                            <Table.Cell>{paper.title}</Table.Cell>\n                            { user.type === 'reviewer' ? <>\n                            <Table.Cell>{paper.minor_rev_deadline}</Table.Cell>\n                            <Table.Cell>{paper.major_rev_deadline}</Table.Cell>\n                            </>:\n                            <Table.Cell>{paper.status}</Table.Cell>}\n                            <Table.Cell textAlign=\"center\">\n                                <Button secondary\n                                    icon\n                                    onClick={e => {\n                                        setPaper(paper)\n                                        setViewPaper(true);\n                                    }}\n                                    labelPosition='left'>\n                                    <Icon name=\"file alternate\" />\n                                    View File\n                                </Button>  \n                            </Table.Cell>\n                            <Table.Cell textAlign='center'>\n                                <Button primary \n                                        as={Link}\n                                        to={`/${user.type}/papers/${paper.id}/view`}\n                                        icon>\n                                    <Icon name='eye' />\n                                </Button>\n                                { user.type === 'researcher' && \n                                <Button secondary\n                                        as={Link}\n                                        to={`/researcher/papers/${paper.id}/edit`}\n                                        icon>\n                                    <Icon name='pencil' />\n                                </Button>}\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                    <Button primary \n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                                setPaper(null);\n                        }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                                floated='left'>\n                            { paper?.title }\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>       \n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />                    \n                </Modal.Content>\n            </Modal>\n        </Container>\n    );\n}\n\nexport default ViewPapers","import React, { useState, useEffect } from \"react\";\n\nimport {\n    Container,\n    Header,\n    Button,\n    Segment,\n    Icon,\n    Table,\n    Loader,\n    Divider,\n    Modal,\n    Embed,\n    Message,\n    Card,\n    Form,\n    TextArea,\n    Step\n} from 'semantic-ui-react'\n\nimport {\n    Link,\n    useParams\n} from 'react-router-dom'\nimport API from \"../../../../utils/API\";\n\nimport { useSelector } from 'react-redux';\nimport { selectUser } from \"../../../../store/selectors/user\"\nimport PaperStatus from \"../../../../components/PaperStatus\";\n\nconst ViewPaper = () => {\n\n    let { id } = useParams();\n    const user = useSelector(selectUser);\n\n    const [fetchPaper, setFetchPaper] = useState(true);\n    const [paper, setPaper] = useState(null);\n    const [nominated, setNominated] = useState(null);\n    const [viewPaper, setViewPaper] = useState(false);\n    const [assigned, setAssigned] = useState(null);\n    const [withdraw, setWithdraw] = useState(false);\n    const [evaluationMetric, setEvaluationMetric] = useState(null);\n    const [reviews, setReviews] = useState(null);\n\n\n    useEffect(() => {\n        if (fetchPaper) {\n            setFetchPaper(false);\n            API.get(`/api/paper/${id}`).then(response => {\n                if (response.data.paper) {\n                    setPaper(response.data.paper);\n                }\n                if (response.data.nominated)\n                    setNominated(response.data.nominated);\n                if (response.data.assigned)\n                    setAssigned(response.data.assigned);\n                if (response.data.withdraw)\n                    setWithdraw(response.data.withdraw);\n                if (response.data.evaluation_metric) {\n                    if (user.type === 'reviewer')\n                        setEvaluationMetric({\n                            ...response.data.evaluation_metric,\n                            questions: response.data.evaluation_metric.questions.map(question => ({\n                                ...question,\n                                answer: \"\",\n                                sent: true,\n                            }))\n                        })\n                    else\n                        setEvaluationMetric(response.data.evaluation_metric)\n                }\n                if (response.data.reviews) {\n                    setReviews(response.data.reviews);\n                    if (user.type === 'reviewer')\n                        setEvaluationMetric({\n                            ...response.data.evaluation_metric,\n                            questions: response.data.evaluation_metric.questions.map(question => ({\n                                ...question,\n                                answer: response.data.reviews.find(review => review.metric_id === question.id)?.answer,\n                                sent: response.data.reviews.find(review => review.metric_id === question.id) ? true : false,\n                            }))\n                        })\n                }\n\n            }).catch(error => {\n\n            })\n        }\n    }, [fetchPaper, id, user.type])\n\n    const handleChange = (question_id, value) => {\n        setEvaluationMetric({\n            ...evaluationMetric,\n            questions: evaluationMetric.questions\n                .map(question => question.id === question_id ? ({\n                    ...question,\n                    answer: value,\n                    sent: false\n                }) : question)\n        })\n    }\n\n    const confirmRejection = e => {\n        API.post(`/api/paper/${id}/request_withdraw`).then(response => {\n            if (response.data.success) {\n                setWithdraw(false);\n            }\n        }).catch(error => {\n\n        })\n    }\n\n    const editAnswer = metric_id => {\n        setEvaluationMetric({\n            ...evaluationMetric,\n            questions: evaluationMetric.questions\n                .map(question => question.id === metric_id ? ({\n                    ...question,\n                    sent: false\n                }) : question)\n        })\n    }\n\n    const sendAnswer = (question_id, answer) => {\n        API.post(`/api/paper/${id}/review`, {\n            question_id: question_id,\n            answer: answer\n        }).then(response => {\n            setEvaluationMetric({\n                ...evaluationMetric,\n                questions: evaluationMetric.questions\n                    .map(question => question.id === question_id ? ({\n                        ...question,\n                        sent: true\n                    }) : question)\n            })\n        }).catch(error => {\n\n        });\n    }\n\n    if (!paper)\n        return (\n            <Container><Loader active inline='centered' /></Container>\n        )\n    return (\n        <Container>\n            { withdraw &&\n                <Message color='yellow'>\n                    {withdraw === 'awaiting' ?\n                        <>\n                            <Icon name='exclamation' /> The author of this paper has requested a withdrawl.\n                        </>\n                        : <>\n\n                            <Icon name='exclamation' /> The withdrawl request has been rejected.\n                            {user.type === 'researcher' &&\n                                <Button secondary size='small' onClick={e => confirmRejection()}>Ok :(</Button>\n                            }\n\n                        </>}\n                </Message>}\n            <Segment clearing vertical>\n                <Header floated='left' >Paper Info</Header>\n                {user.type === 'researcher' &&\n                    <Button floated='right'\n                        icon\n                        secondary\n                        to={`/researcher/papers/${id}/edit`}\n                        as={Link}\n                        labelPosition='left'\n                        size='small'>\n                        <Icon name='plus' />\n                    Edit Paper\n                </Button>}\n            </Segment>\n            <Table definition>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>{paper.title}</Table.Cell>\n                    </Table.Row>\n                    <Table.Row>\n                        <Table.Cell>Status</Table.Cell>\n                        <Table.Cell>\n                            <PaperStatus status={paper.status} />\n                        </Table.Cell>\n                    </Table.Row>\n                    { paper.editor && <>\n                    <Table.Row>\n                        <Table.Cell>Editor</Table.Cell>\n                        <Table.Cell>{paper.editor}</Table.Cell>\n                    </Table.Row> \n                    <Table.Row>\n                        <Table.Cell>Editor email</Table.Cell>\n                        <Table.Cell>{paper.editor_email}</Table.Cell>\n                    </Table.Row> </>}\n                    {user.type === 'reviewer' && <>\n                        <Table.Row>\n                            <Table.Cell>Researcher</Table.Cell>\n                            <Table.Cell>{paper.researcher}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Researcher email</Table.Cell>\n                            <Table.Cell>{paper.researcher_email}</Table.Cell>\n                        </Table.Row>\n                    </>}\n                    <Table.Row>\n                        <Table.Cell>File</Table.Cell>\n                        <Table.Cell>\n                            <Button secondary\n                                icon\n                                onClick={e => {\n                                    setViewPaper(true);\n                                }}\n                                labelPosition='left'>\n                                <Icon name=\"file alternate\" />\n                                View File\n                            </Button>\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n            { evaluationMetric && evaluationMetric.questions && evaluationMetric.questions.length > 0 && <>\n            <Divider />\n            <Segment clearing vertical>\n                <Header>Evaluation Metric: {evaluationMetric?.name}</Header>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {evaluationMetric?.questions.map(metric =>\n                    <Card key={metric.id}>\n                        <Card.Content>\n                            <Card.Header>{metric.question}</Card.Header>\n                            <Card.Meta>\n                                <span>Answer Type: {metric.answer_type}</span>\n                            </Card.Meta>\n                            {user.type === 'reviewer' && <>\n                                <Divider />\n                                <p>Your Answer:</p>\n                                {metric.sent ? <>\n                                    {metric.answer}\n                                    <Divider hidden />\n                                    <Button type=\"submit\" primary icon labelPosition='right'\n                                        onClick={e => editAnswer(metric.id)}>\n                                        <Icon name='pencil' />\n                                         Edit answer\n                                    </Button>\n                                </> :\n                                    <Form>\n                                        {metric.answer_type === 'scale' ?\n                                            <Form.Input type=\"number\"\n                                                placeholder=\"Your answer\"\n                                                value={metric.answer}\n                                                onChange={(e, { name, value }) => handleChange(metric.id, value)} />\n                                            :\n                                            <TextArea cols=\"27\" name=\"answer\"\n                                                placeholder=\"Your answer\"\n                                                value={metric.answer}\n                                                onChange={(e, { name, value }) => handleChange(metric.id, value)} />}\n                                        <Divider hidden />\n                                        <Button type=\"submit\" primary icon labelPosition='right'\n                                            onClick={e => sendAnswer(metric.id, metric.answer)}>\n                                            <Icon name='send' />\n                                    Send\n                                </Button>\n                                    </Form>}\n                            </>}\n                        </Card.Content>\n                    </Card>)}\n            </Card.Group> </> }\n            { reviews && reviews.length > 0 && <>\n            <Divider />\n            <Segment clearing vertical>\n                <Header>Reviews:</Header>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {reviews?.map(review =>\n                    <Card key={review.id}>\n                        <Card.Content>\n                            <Card.Header>{review.question}</Card.Header>\n                            By: {review.reviewer}\n                            <Card.Meta>\n                                <span>Answer Type: {review.answer_type}</span>\n                            </Card.Meta>\n                            <Divider />\n                            {review.answer}\n                        </Card.Content>\n                    </Card>)}\n            </Card.Group> </> }\n            { nominated && nominated.length > 0 && <>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Nominated Reviewers</Header>\n            </Segment>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Reviewer</Table.HeaderCell>\n                        <Table.HeaderCell>Reviewer Email</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {nominated && nominated.map(nominee =>\n                        <Table.Row key={nominee.id}>\n                            <Table.Cell>{nominee.reviewer}</Table.Cell>\n                            <Table.Cell>{nominee.reviewer_email}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table></>}\n            { assigned && assigned.length > 0 && <>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Assigned Reviewers</Header>\n            </Segment>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Reviewer</Table.HeaderCell>\n                        <Table.HeaderCell>Reviewer Email</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {assigned && assigned.map(nominee =>\n                        <Table.Row key={nominee.id}>\n                            <Table.Cell>{nominee.reviewer}</Table.Cell>\n                            <Table.Cell>{nominee.reviewer_email}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table> </> }\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n        </Container>\n    )\n}\n\nexport default ViewPaper","import React, { useState, useEffect } from \"react\";\n\nimport {\n    Container,\n    Header,\n    Button,\n    Segment,\n    Icon,\n    Table,\n    Loader,\n    Divider,\n    Form,\n    Modal,\n    Embed,\n    Message,\n    Card\n} from 'semantic-ui-react'\n\nimport {\n    useParams,\n    useHistory\n} from 'react-router-dom'\nimport API from \"../../../../utils/API\";\nimport PaperStatus from \"../../../../components/PaperStatus\";\n\nconst EditPaper = () => {\n    let { id } = useParams();\n    let history = useHistory();\n\n    const [fetchPaper, setFetchPaper] = useState(true);\n    const [paper, setPaper] = useState({\n        id: \"\",\n        title: \"\",\n        status: \"\",\n        file_path: \"\",\n        researcher_email: \"\",\n        editor_email: \"\",\n        em_name: \"\"\n    });\n\n    const [error, setError] = useState({});\n    const [changed, setChanged] = useState({});\n\n    const [viewPaper, setViewPaper] = useState(false);\n\n    const [editPaperFile, setEditPaperFile] = useState(false);\n    const [newFile, setNewFile] = useState(null);\n\n    const [nominateReviewer, setNominateReviewer] = useState(false);\n\n    const [reviewer, setReviewer] = useState(null);\n\n    const [nominated, setNominated] = useState(null);\n    const [assigned, setAssigned] = useState(null);\n    const [withdrawn, setWithdrawn] = useState(false);\n\n    const [reviewers, setReviewers] = useState(null);\n    const [fetchReviewers, setFetchReviewers] = useState(false);\n\n    const [evaluationMetric, setEvaluationMetric] = useState(null);\n\n    const newPaper = id === 'new'\n\n    useEffect(() => {\n        if (!newPaper && fetchPaper) {\n            setFetchPaper(false);\n            API.get(`/api/paper/${id}`).then(response => {\n                if (response.data.paper) {\n                    setPaper(response.data.paper);\n                }\n\n                if (response.data.nominated)\n                    setNominated(response.data.nominated);\n\n                if (response.data.assigned)\n                    setAssigned(response.data.assigned);\n\n                if (response.data.withdraw)\n                    setWithdrawn(response.data.withdraw);\n\n                if (response.data.evaluation_metric)\n                    setEvaluationMetric(response.data.evaluation_metric)\n                setFetchReviewers(true);\n            }).catch(error => {\n\n            })\n        }\n    }, [fetchPaper, id, newPaper])\n\n    useEffect(() => {\n        if (!newPaper && fetchReviewers) {\n            setFetchReviewers(false);\n            API.get(`/api/users/of_type/reviewer`).then(response => {\n                if (response.data.users) {\n                    setReviewers(response.data.users\n                        .filter(user => assigned.find(nominee => nominee.reviewer_email === user.email) === undefined)\n                        .filter(user => nominated.find(nominee => nominee.reviewer_email === user.email) === undefined)\n                        .map(user => ({\n                            key: user.email,\n                            text: user.first_name + ' ' + user.last_name,\n                            value: user.email\n                        })))\n                }\n            }).catch(error => {\n\n            })\n        }\n    }, [assigned, fetchReviewers, id, newPaper, nominated])\n\n    const handleChange = (e, { name, value }) => {\n        setPaper({\n            ...paper,\n            [name]: value\n        });\n\n        if (!newPaper)\n            setChanged({\n                ...changed,\n                [name]: value\n            })\n        else\n            setChanged({ new_journal: true });\n    }\n\n    const saveAll = e => {\n\n\n        let formData = new FormData();\n        if (newFile) {\n            formData.append(\"file\", newFile);\n            formData.append(\"title\", paper.title);\n        }\n\n        API.post(`/api/paper/${newPaper ? 'upload' : `${id}/edit`}`, (newPaper || newFile) ?\n            formData : paper\n        ).then((response) => {\n            if (response.data.success) {\n                setError({})\n                setChanged({})\n                if (response.data.paper)\n                    history.replace(`/researcher/papers/${response.data.paper.id}/view`)\n            }\n        }).catch((error => {\n            console.error(error.response);\n            setError(error.response.data.errors);\n        }))\n    }\n\n    const saveField = (name, value) => {\n\n        let formData = new FormData();\n        if (newFile) {\n            formData.append(\"file\", newFile);\n        }\n\n        API.post(`/api/paper/${id}/edit`, name === 'file' ? formData\n            : {\n                [name]: value\n            }).then((response) => {\n                if (response.data.success) {\n                    setError({\n                        ...error,\n                        [name]: false\n                    })\n                    setChanged({\n                        ...changed,\n                        [name]: false\n                    })\n                }\n\n                if (response.data.new_file_path) {\n                    setPaper({\n                        ...paper,\n                        file_path: response.data.new_file_path\n                    })\n                    setChanged({\n                        ...changed,\n                        file: false\n                    })\n\n                    setNewFile(null);\n                    setEditPaperFile(false);\n                }\n            }).catch((error => {\n                console.error(error.response);\n                setError(error.response.data.errors);\n            }))\n    }\n\n    const newNominatedReviewer = () => {\n        API.post(`/api/nominated/new`, {\n            paper_id: id,\n            reviewer_email: reviewer\n        }).then(response => {\n            if (response.data.success) {\n                setReviewer(null);\n                setNominateReviewer(false);\n                if (response.data.nominated) {\n                    setNominated([...nominated, response.data.nominated]);\n                    console.log(reviewers)\n                    console.log(response.data.nominated)\n                    setReviewers(reviewers.filter(reviewer => reviewer.key !== response.data.nominated.reviewer_email))\n                }\n            }\n        }).catch((error => {\n            console.error(error.response);\n        }))\n    }\n\n    const handleReviewerChange = (e, { name, value }) => {\n        setReviewer(value);\n    }\n\n    const removeNominee = nominee => {\n        API.post(`/api/nominated/remove`, {\n            paper_id: id,\n            reviewer_email: nominee.reviewer_email\n        }).then(response => {\n            if (response.data.success) {\n                setReviewer(null);\n                setNominateReviewer(false);\n                setNominated(nominated.filter(n => n.reviewer_id !== nominee.reviewer_id))\n                setReviewers([...reviewers, {\n                    key: nominee.reviewer_email,\n                    text: nominee.reviewer,\n                    value: nominee.reviewer_email\n                }])\n            }\n        }).catch((error => {\n            console.error(error.response);\n        }))\n    }\n\n    const requestWidthrawal = () => {\n        API.post(`/api/paper/${paper.id}/request_withdraw`).then(response => {\n            if (response.data.success)\n                setWithdrawn( !withdrawn ? 'awaiting' : false );\n        }).catch(error => {\n\n        })\n    }\n\n    if (!paper)\n        return (\n            <Container><Loader active inline='centered' /></Container>\n        )\n    return (\n        <Container>\n            { withdrawn &&\n                <Message color='yellow'>\n                    {withdrawn === 'awaiting' ?\n                        <>\n                            <Icon name='exclamation' /> The author of this paper has requested a withdrawl.\n                        </>\n                        : <>\n                            \n                            <Icon name='exclamation' /> The withdrawl request has been rejected.\n                            <Button secondary size='small' onClick={e => requestWidthrawal()}>Ok :(</Button>\n\n                        </>}\n                </Message>}\n            <Segment clearing vertical>\n                <Header floated='left' >Paper Info</Header>\n                {!newPaper && (withdrawn ?\n                    <Button icon color='green'\n                        labelPosition='left'\n                        floated='right'\n                        size='small'\n                        animated\n                        onClick={(e) => requestWidthrawal()}>\n                        <Button.Content visible>\n                            <Icon name='check' />\n                            Withdrawn Requested\n                        </Button.Content>\n                        <Button.Content hidden>\n                            <Icon name='remove' />\n                            Cancel withdrawal\n                        </Button.Content>\n                    </Button>\n                    :\n                    <Button icon secondary\n                        labelPosition='left'\n                        floated='right'\n                        size='small'\n                        onClick={(e) => requestWidthrawal()}>\n                        <Icon name='undo' />\n                        Request Withdrawal\n                </Button>)}\n\n                {Object.keys(changed).length > 0 &&\n                    Object.keys(changed).reduce((acc, current) =>\n                        acc || changed[current], false) ?\n                    <Button labelPosition='left'\n                        floated='right'\n                        icon\n                        onClick={saveAll}\n                        secondary\n                        size='small'>\n                        <Icon name='save' />\n                    Save Publication\n                </Button> :\n                    <Button labelPosition='left'\n                        floated='right'\n                        icon\n                        disabled\n                        primary\n                        size='small'>\n                        <Icon name='save' />\n                        Saved\n                </Button>}\n            </Segment>\n            <Table definition>\n                <Table.Body>\n                    <Table.Row>\n                        <Table.Cell>Title</Table.Cell>\n                        <Table.Cell>\n                            <Form.Field>\n                                <Form.Input placeholder=\"Title\"\n                                    name=\"title\"\n                                    value={paper.title}\n                                    onChange={handleChange}\n                                    error={error && error.title &&\n                                    {\n                                        content: error.title.join(' & '),\n                                        pointing: 'left'\n                                    }}\n                                    icon={!newPaper && changed?.title && {\n                                        name: 'save',\n                                        circular: true,\n                                        link: true,\n                                        onClick: e => saveField('title', paper.title)\n                                    }} />\n                            </Form.Field>\n                        </Table.Cell>\n                    </Table.Row>\n                    {!newPaper && <>\n                        <Table.Row>\n                            <Table.Cell>Status</Table.Cell>\n                            <Table.Cell>\n                                <PaperStatus status={paper.status} />\n                            </Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Editor</Table.Cell>\n                            <Table.Cell>{paper.editor}</Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell>Editor Email</Table.Cell>\n                            <Table.Cell>{paper.editor_email}</Table.Cell>\n                        </Table.Row>\n                    </>}\n                    <Table.Row>\n                        <Table.Cell>File</Table.Cell>\n                        <Table.Cell>\n\n                            {(editPaperFile || newPaper) ?\n                                <>\n                                    <Form.Field inline className=\"table_select\">\n                                        <Form.Input placeholder=\"File\"\n                                            className=\"table_select\"\n                                            name=\"file\"\n                                            onChange={e => {\n                                                setNewFile(e.target.files[0])\n                                                setChanged({\n                                                    ...changed,\n                                                    file: true\n                                                })\n                                            }}\n                                            type=\"file\" />\n                                    </Form.Field>\n                                    {!newPaper && changed.file && <Icon name='save'\n                                        circular\n                                        link={true}\n                                        onClick={e => saveField('file', paper.file_path)} />}\n                                    {!newPaper &&\n                                        <Button secondary\n                                            icon\n                                            onClick={e => {\n                                                setEditPaperFile(false);\n                                            }}>\n                                            <Icon name=\"remove\" />\n                                        </Button>}\n                                </>\n                                :\n                                <>\n                                    <Button secondary\n                                        icon\n                                        onClick={e => {\n                                            setViewPaper(true);\n                                        }}\n                                        labelPosition='left'>\n                                        <Icon name=\"file alternate\" />\n                                View File\n                            </Button>\n                                    <Button secondary\n                                        icon\n                                        onClick={e => {\n                                            setEditPaperFile(true);\n                                        }}>\n                                        <Icon name=\"pencil\" />\n                                    </Button>\n                                </>\n                            }\n                        </Table.Cell>\n                    </Table.Row>\n                </Table.Body>\n            </Table>\n            { !newPaper && <>\n            <Divider />\n            <Segment clearing vertical>\n                <Header>Evaluation Metric: {evaluationMetric?.name}</Header>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {evaluationMetric?.questions.map(metric =>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{metric.question}</Card.Header>\n                            <Card.Meta>\n                                <span>{metric.answer_type}</span>\n                            </Card.Meta>\n\n                        </Card.Content>\n                    </Card>)}\n            </Card.Group>\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Nominated Reviewers</Header>\n                {nominateReviewer ?\n                    <Button floated='right'\n                        icon\n                        color='green'\n                        onClick={e => newNominatedReviewer()}\n                        labelPosition='left'\n                        size='small'>\n                        <Icon name='save' />\n                    Nominate this reviewer\n                </Button>\n                    :\n\n                    <Button floated='right'\n                        icon\n                        primary\n                        onClick={e => setNominateReviewer(true)}\n                        labelPosition='left'\n                        size='small'>\n                        <Icon name='plus' />\n                    Nominate Reviewer\n                </Button>}\n            </Segment>\n            { ( (nominated && nominated.length > 0) || nominateReviewer) ?\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Reviewer</Table.HeaderCell>\n                        <Table.HeaderCell>Reviewer Email</Table.HeaderCell>\n                        <Table.HeaderCell>Remove Reviewer</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {nominateReviewer && <Table.Row>\n                        <Table.Cell>\n                            <Form.Select placeholder=\"Reviewer\"\n                                name=\"reviewer\"\n                                search\n                                value={reviewer}\n                                onChange={handleReviewerChange}\n                                options={reviewers} />\n                        </Table.Cell>\n                        <Table.Cell>\n                            {reviewer && reviewer}\n                        </Table.Cell>\n                    </Table.Row>}\n\n                    {nominated && nominated.map(nominee =>\n                        <Table.Row key={nominee.id}>\n                            <Table.Cell>{nominee.reviewer}</Table.Cell>\n                            <Table.Cell>{nominee.reviewer_email}</Table.Cell>\n                            <Table.Cell>\n                                <Button color='red'\n                                    icon\n                                    onClick={e => removeNominee(nominee)}>\n                                    <Icon name='remove' />\n                                </Button>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table> : <Message color='yellow'>No nominations.</Message>}\n            <Divider />\n            <Segment clearing vertical>\n                <Header floated='left' >Assigned Reviewers</Header>\n            </Segment>\n            <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Reviewer</Table.HeaderCell>\n                        <Table.HeaderCell>Reviewer Email</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {assigned && assigned.map(nominee =>\n                        <Table.Row key={nominee.id}>\n                            <Table.Cell>{nominee.reviewer}</Table.Cell>\n                            <Table.Cell>{nominee.reviewer_email}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table> </>}\n            <Modal\n                dimmer='inverted'\n                onClose={() => setViewPaper(false)}\n                onOpen={() => setViewPaper(true)}\n                open={viewPaper}\n                size='fullscreen'>\n                <Segment clearing vertical padded>\n                    <Container className='file-view-header'>\n                        <Button primary\n                            floated='right'\n                            onClick={(e) => {\n                                setViewPaper(false);\n                            }}>\n                            <Icon name='check' /> Done\n                        </Button>\n                        <Header textAlign='center'\n                            floated='left'>\n                            {paper?.title}\n                            <Header.Subheader>\n                                {paper?.researcher_email}\n                            </Header.Subheader>\n                        </Header>\n                    </Container>\n                </Segment>\n                <Modal.Content>\n                    <Embed\n                        defaultActive\n                        icon='right circle arrow'\n                        placeholder='/images/image-16by9.png'\n                        url={`http://localhost/storage/${paper?.file_path}`}\n                    />\n                </Modal.Content>\n            </Modal>\n        </Container>\n    )\n}\n\nexport default EditPaper","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    useRouteMatch,\n    Redirect\n  } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport ViewPapers from \"./components/ViewPapers\"\nimport ViewPaper from \"./components/ViewPaper\";\nimport EditPaper from \"./components/EditPaper\"\n\nimport './index.css';\nimport PublicationsList from \"../Admin/components/PublicationsList\";\nimport ViewPublication from \"../Admin/components/ViewPublication\";\n\nconst Researcher = () => {\n\n    let { path, url } = useRouteMatch();\n\n    return (\n        <div className=\"researcher\">\n            <Navigation url={url} />\n            <div className=\"ui container middle\">\n                <Switch>\n                    <Route exact path={path}>\n                        <Redirect to={`${path}/papers`} />\n                    </Route>\n                    <Route exact path={`${path}/papers`}>\n                        <ViewPapers />\n                    </Route>\n                    <Route path={`${path}/papers/:id/view`}>\n                        <ViewPaper />\n                    </Route>\n                    <Route path={`${path}/papers/:id/edit`}>\n                        <EditPaper />\n                    </Route>\n\n                    <Route exact path={`${path}/publications`}>\n                        <PublicationsList />\n                    </Route>\n\n                    <Route path={`${path}/publications/:id`}>\n                        <ViewPublication />\n                    </Route>\n                </Switch>\n            </div>\n        </div>       \n    );  \n};\n\nexport default Researcher;\n","import React from \"react\";\nimport { Menu } from 'semantic-ui-react'\n\nimport UserNav from \"../../../../components/UserNav\";\nimport {\n    NavLink\n  } from \"react-router-dom\";\n\nimport './index.css';\n\nconst ReviewerNavigation = ({url}) => {\n\n    return (\n        <Menu>\n            <Menu.Item exact to={`${url}`}\n                as={NavLink}>\n                My Papers to review\n            </Menu.Item>\n            <Menu.Item exact to={`${url}/publications`}\n                as={NavLink}>\n                Publications\n            </Menu.Item>\n            <UserNav />\n        </Menu>   \n    );  \n};\n\nexport default ReviewerNavigation;\n","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    useRouteMatch,\n    Redirect\n} from \"react-router-dom\";\nimport ViewPapers from \"../Researcher/components/ViewPapers\";\nimport ViewPaper from \"../Researcher/components/ViewPaper\";\n\n\nimport Navigation from \"./components/Navigation\";\nimport PublicationsList from \"../Admin/components/PublicationsList\";\nimport ViewPublication from \"../Admin/components/ViewPublication\";\n\nimport './index.css';\n\nconst Reviewer = () => {\n\n    let { path, url } = useRouteMatch();\n\n    return (\n        <div className=\"reviewer\">\n            <Navigation url={url} />\n            <div className=\"ui container middle\">\n                <Switch>\n                    <Route exact path={path}>\n                        <Redirect to={`${path}/papers`} />\n                    </Route>\n                    <Route exact path={`${path}/papers`}>\n                        <ViewPapers />\n                    </Route>\n                    <Route path={`${path}/papers/:id/view`}>\n                        <ViewPaper />\n                    </Route>\n\n                    <Route exact path={`${path}/publications`}>\n                        <PublicationsList />\n                    </Route>\n\n                    <Route path={`${path}/publications/:id`}>\n                        <ViewPublication />\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    );\n};\n\nexport default Reviewer;\n","import React from \"react\";\nimport { Menu } from 'semantic-ui-react'\n\nimport UserNav from \"../../../../components/UserNav\";\nimport {\n    NavLink\n  } from \"react-router-dom\";\n\nimport './index.css';\n\nconst ViewerNavigation = ({url}) => {\n\n    return (\n        <Menu>\n            <Menu.Item to={`${url}/publications`}\n                as={NavLink}>\n                Publications\n            </Menu.Item>\n            <UserNav />\n        </Menu>   \n    );  \n};\n\nexport default ViewerNavigation;\n","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    useRouteMatch,\n    Redirect,\n  } from \"react-router-dom\";\nimport PublicationsList from \"../Admin/components/PublicationsList\";\nimport ViewPublication from \"../Admin/components/ViewPublication\";\n\nimport Navigation from \"./components/Navigation\";\n\nimport './index.css';\n\nconst Viewer = () => {\n\n    let { path, url } = useRouteMatch();\n\n    return (\n        <div className=\"viewer\">\n            <Navigation url={url} />\n            <div className=\"ui container middle\">\n                <Switch>\n                    <Route exact path={path}>\n                      <Redirect to={`${path}/publications`}/>\n                    </Route>\n                    <Route exact path={`${path}/publications`}>\n                        <PublicationsList/>\n                    </Route>\n                    <Route path={`${path}/publications/:id`}>\n                        <ViewPublication/>\n                    </Route>\n                </Switch>\n            </div>\n        </div>       \n    );  \n};\n\nexport default Viewer;\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n    Container,\n    Segment,\n    Header,\n    Button,\n    Icon,\n    Card,\n    Divider\n} from 'semantic-ui-react'\n\nimport {\n    Link\n} from 'react-router-dom'\n\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../../store/selectors/user'\n\nimport './index.css';\nimport API from \"../../utils/API\";\n\nconst EvaluationMetrics = () => {\n\n    const user = useSelector(selectUser);\n    const [evaluationMetrics, setEvaluationMetrics] = useState(null);\n    const [fetch, setFetch] = useState(true);\n\n    useEffect(() => {\n        if (fetch) {\n            setFetch(false);\n            API.get('/api/evaluation_metrics/all').then(response => {\n                if (response.data.evaluation_metrics)\n                    setEvaluationMetrics(response.data.evaluation_metrics)\n            }).catch(error => {\n\n            })\n        }\n    }, [fetch])\n\n    return (\n        <Container className=\"evaluation-metrics\">\n            <Segment clearing vertical>\n                <Header floated='left' >\n                    Evaluation Metrics\n                </Header>\n                <Button icon\n                    size=\"small\"\n                    primary\n                    labelPosition='left'\n                    floated='right'\n                    to={`/${user.type}/evaluation_metrics/new/edit`}\n                    as={Link}>\n                    <Icon name='plus' />\n                    New Evaluation Metric\n                </Button>\n            </Segment>\n            <Divider hidden />\n            <Card.Group>\n                {evaluationMetrics && evaluationMetrics.map(em =>\n                    <Card>\n                        <Card.Content>\n                            <Header as='h2'>{em.name}</Header>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <div className='ui two buttons'>\n                                <Button icon\n                                    as={Link}\n                                    to={`/${user.type}/evaluation_metrics/${em.id}/view`}\n                                    labelPosition='left'\n                                    primary>\n                                    <Icon name='eye' /> View\n                                </Button>\n                                {( user.type === 'admin' || user.type === 'editor' ) && <Button icon\n                                    labelPosition='left'\n                                    as={Link}\n                                    to={`/${user.type}/evaluation_metrics/${em.id}/edit`}\n                                    secondary>\n                                    <Icon name='pencil' /> Edit\n                                </Button>}\n                            </div>\n                        </Card.Content>\n                    </Card>\n                )}\n            </Card.Group>\n        </Container>\n    );\n};\n\nexport default EvaluationMetrics;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useParams,\n    useHistory\n} from 'react-router-dom'\n\nimport {\n    Container,\n    Segment,\n    Loader,\n    Header,\n    Icon,\n    Button,\n    Message,\n    Table,\n    Form\n} from 'semantic-ui-react'\n\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../../store/selectors/user'\n\nimport API from \"../../utils/API\";\n\nimport './index.css';\n\n\nconst questionTypes = [\n    { key: 'comment', value: 'comment', text: 'Comment' },\n    { key: 'scale', value: 'scale', text: 'Scale' }\n]\n\nconst EditEvaluationMetric = () => {\n\n    let history = useHistory();\n    const { id } = useParams();\n\n    const user = useSelector(selectUser);\n\n    const [fetch, setFetch] = useState(true);\n    const [evaluationMetric, setEvaluationMetric] = useState({\n        name: ''\n    });\n    const [metrics, setMetrics] = useState(null);\n\n    const [changed, setChanged] = useState(false);\n    const [newCounter, setNewCounter] = useState(0);\n\n    const newEM = id === 'new';\n\n    useEffect(() => {\n        if (!newEM && fetch) {\n            setFetch(false);\n            API.get(`/api/evaluation_metrics/${id}`).then(response => {\n                if (response.data.evaluation_metric)\n                    setEvaluationMetric(response.data.evaluation_metric)\n\n                if (response.data.metrics)\n                    setMetrics(response.data.metrics)\n            }).catch(err => {\n\n            })\n        }\n    }, [fetch, id, newEM])\n\n    const saveEvaluationMetric = () => {\n        API.post(`/api/evaluation_metrics/${newEM ? 'new' : `${id}/edit`}`, {\n            name: evaluationMetric.name\n        }).then(response => {\n            setChanged(false);\n            if (newEM)\n                history.replace(`/${user.type}/evaluation_metrics/${response.data.evaluation_metric.id}/edit`)\n        }).catch(err => {\n            \n        })\n    }\n\n    const handleChange = (e, { name, value }) => {\n        setEvaluationMetric({\n            ...evaluationMetric,\n            [name]: value\n        });\n        setChanged(true);\n    }\n\n    const newQuestion = () => {\n        setMetrics([{\n            edit: true,\n            id: 'new' + newCounter,\n            question: \"\",\n            answer_type: \"\",\n        }, ...metrics])\n        setNewCounter(newCounter + 1);\n    }\n\n    const cancelQuestion = metric_id => {\n        setMetrics(metrics.filter(metric => metric.id !== metric_id));\n    }\n\n    const editQuestion = metric_id => {\n        setMetrics(metrics.map(metric => metric.id === metric_id ? ({\n            ...metric,\n            edit: true\n        }) : metric))\n    }\n\n    const saveQuestion = metric_id => {\n        API.post(`/api/evaluation_metrics/${id}/add_question`, metrics.find(metric => metric.id === metric_id)).then(response => {\n            setMetrics(metrics.map(metric => metric.id === metric_id ? ({\n                ...metric,\n                id: response.data.metric.id,\n                edit: false\n            }) : metric))\n        }).catch(err => {\n\n        })\n    }\n\n    const handleQuestionChange = (id, { name, value }) => {\n        setMetrics(metrics.map(metric => metric.id === id ? ({\n            ...metric,\n            [name]: value\n        }) : metric));\n\n    }\n\n    const removeQuestion = metric_id => {\n        API.post(`/api/evaluation_metrics/${id}/remove_question`, {\n            metric_id: metric_id\n        }).then(response => {\n            setMetrics(metrics.filter(metric => metric.id !== metric_id))\n        }).catch(err => {\n\n        })\n    }\n\n    if (user.type !== 'admin' && user.type !== 'editor')\n        return (<Container><Message>Yoou are not supposed to be here</Message></Container>)\n\n    if (!evaluationMetric)\n        return (<Container><Loader active inline='centered' /></Container>)\n\n    return (\n        <Container className=\"view-evaluation-metric\">\n            <Segment clearing vertical>\n                <Header floated='left' as={'div'} >\n                    <Form.Field>\n                        <Form.Input placeholder=\"Evaluation Metric Name\"\n                            value={evaluationMetric.name}\n                            name='name'\n                            onChange={handleChange} />\n                    </Form.Field>\n                </Header>\n                {changed ?\n                    <Button icon\n                        size=\"small\"\n                        primary\n                        labelPosition='left'\n                        onClick={e => saveEvaluationMetric()}\n                        floated='right'>\n                        <Icon name=\"save\" />\n                Save Evaluation Metric\n                 </Button> :\n                    <Button icon\n                        size=\"small\"\n                        primary\n                        disabled\n                        labelPosition='left'\n                        floated='right'>\n                        <Icon name=\"save\" />\n                    Evaluation Metric Saved\n                </Button>\n                }\n            </Segment>\n\n            { (!newEM && metrics && metrics.length > 0)\n                ? <>\n                    <Segment clearing vertical>\n                        <Button primary icon\n                            onClick={e => newQuestion()}\n                            labelPosition='left' >\n                            <Icon name='plus' />\n                    Add Question\n                    </Button>\n                    </Segment>\n                    <Table>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Question</Table.HeaderCell>\n                                <Table.HeaderCell>Answer Type</Table.HeaderCell>\n                                <Table.HeaderCell>Actions</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {metrics.map(metric =>\n                                <Table.Row>\n                                    <Table.Cell>\n                                        {metric.edit ? <Form.Field>\n                                            <Form.Input placeholder=\"Question\"\n                                                name=\"question\"\n                                                value={metric.question}\n                                                onChange={(e, { name, value }) => handleQuestionChange(metric.id, { name, value })} />\n                                        </Form.Field> :\n                                            metric.question}\n                                    </Table.Cell>\n                                    <Table.Cell>\n                                        {metric.edit ?\n                                            <Form.Select placeholder=\"Question Type\"\n                                                name=\"answer_type\"\n                                                options={questionTypes}\n                                                value={metric.answer_type}\n                                                onChange={(e, { name, value }) => handleQuestionChange(metric.id, { name, value })} /> :\n                                            metric.answer_type}\n                                    </Table.Cell>\n                                    <Table.Cell textAlign='center'>\n                                        {metric.edit ?\n                                            <>\n                                                <Button icon\n                                                    primary\n                                                    onClick={e => saveQuestion(metric.id)}\n                                                    labelPosition=\"left\">\n                                                    <Icon name=\"save\" />\n                                    Save question\n                                </Button>\n                                                <Button icon\n                                                    onClick={e => cancelQuestion(metric.id)}\n                                                    color=\"red\"\n                                                    labelPosition=\"left\">\n                                                    <Icon name=\"remove\" />\n                                    Cancel question\n                                </Button>\n                                            </> :\n                                            <>\n                                                <Button icon\n                                                    primary\n                                                    onClick={e => editQuestion(metric.id)}\n                                                    labelPosition=\"left\">\n                                                    <Icon name=\"pencil\" />\n                                    Edit question\n                                </Button>\n                                                <Button icon\n                                                    color=\"red\"\n                                                    onClick={e => removeQuestion(metric.id)}\n                                                    labelPosition=\"left\">\n                                                    <Icon name=\"remove\" />\n                                    Remove question\n                                </Button>\n                                            </>\n                                        }\n                                    </Table.Cell>\n                                </Table.Row>)}\n                        </Table.Body>\n                    </Table>\n                </> : !newEM &&\n                <Message>\n                    There are no questions for this metric\n                    <Button primary icon\n                        size=\"small\"\n                        className=\"margin-button\"\n                        onClick={e => newQuestion()}\n                        labelPosition='left' >\n                        <Icon name='plus' />\n                            Add Question\n                    </Button>\n                </Message>}\n        </Container>\n    );\n};\n\nexport default EditEvaluationMetric;\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n    useParams,\n    Link\n} from 'react-router-dom'\n\nimport {\n    Container,\n    Segment,\n    Loader,\n    Header,\n    Icon,\n    Button,\n    Message,\n    Table\n} from 'semantic-ui-react'\n\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../../store/selectors/user'\n\nimport API from \"../../utils/API\";\n\nimport './index.css';\n\nconst ViewEvaluationMetric = () => {\n\n    const { id } = useParams();\n\n    const user = useSelector(selectUser);\n\n    const [fetch, setFetch] = useState(true);\n    const [evaluationMetric, setEvaluationMetric] = useState(null);\n    const [metrics, setMetrics] = useState(null);\n\n    const newEM = id === 'new';\n\n    useEffect(() => {\n        if (!newEM && fetch) {\n            setFetch(false);\n            API.get(`/api/evaluation_metrics/${id}`).then(response => {\n                if (response.data.evaluation_metric)\n                    setEvaluationMetric(response.data.evaluation_metric)\n\n                if (response.data.metrics)\n                    setMetrics(response.data.metrics)\n            }).catch(err => {\n\n            })\n        }\n    }, [fetch, id, newEM])\n\n    if (!evaluationMetric)\n        return (<Container><Loader active inline='centered' /></Container>)\n    return (\n        <Container className=\"view-evaluation-metric\">\n            <Segment clearing vertical>\n                <Header floated='left' >\n                    {evaluationMetric.name}\n                </Header>\n                {(user.type === 'editor' || user.type === 'admin') &&\n                    <Button icon\n                        size=\"small\"\n                        primary\n                        labelPosition='left'\n                        floated='right'\n                        to={`/${user.type}/evaluation_metrics/${id}/edit`}\n                        as={Link}>\n                        <Icon name=\"pencil\" />\n                    Edit Evaluation Metric\n                </Button>}\n            </Segment>\n\n            { (metrics && metrics.length > 0) ? <Table>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Question</Table.HeaderCell>\n                        <Table.HeaderCell>Answer Type</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {metrics.map(metric =>\n                        <Table.Row>\n                            <Table.Cell>{metric.question}</Table.Cell>\n                            <Table.Cell>{metric.answer_type}</Table.Cell>\n                        </Table.Row>)}\n                </Table.Body>\n            </Table> : <Message>There are no questions for this metric</Message>}\n        </Container>\n    );\n};\n\nexport default ViewEvaluationMetric;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../store/selectors/user\"\n\nimport { Menu, Segment } from 'semantic-ui-react';\n\nimport {\n    Switch,\n    Route,\n    Redirect,\n    NavLink\n} from \"react-router-dom\";\n\nimport Login from \"../Login\";\nimport PrivateRoute from \"../PrivateRoute\";\nimport Register from \"../Register\";\nimport UserTokens from \"../UserTokens\";\n\nimport Admin from '../../views/Admin';\nimport Editor from '../../views/Editor';\nimport Researcher from '../../views/Researcher';\nimport Reviewer from '../../views/Reviewer';\nimport Viewer from '../../views/Viewer';\n\nimport EvaluationMetrics from '../EvaluationMetrics';\nimport EditEvaluationMetric from '../EditEvaluationMetric';\nimport ViewEvaluationMetric from '../ViewEvaluationMetric';\n\nimport 'semantic-ui-less/semantic.less'\nimport './index.css';\n\nconst App = () => {\n\n    const user = useSelector(selectUser);\n\n    return (\n        <>\n            { !user &&\n                <Menu>\n                    <Menu.Item exact to=\"/login\"\n                        as={NavLink}>\n                        Login\n                </Menu.Item>\n                    <Menu.Item exact to=\"/register\"\n                        as={NavLink}>\n                        Register\n                </Menu.Item>\n                </Menu>\n            }\n            <Switch>\n                <Route exact path=\"/\">\n                    <Redirect to=\"login\" />\n                </Route>\n                <Route path=\"/login\"\n                    component={Login} />\n                <Route path=\"/register\"\n                    component={Register} />\n                <PrivateRoute path=\"/admin\"\n                    type=\"admin\" >\n                    <Admin />\n                </PrivateRoute>\n                <PrivateRoute path=\"/viewer\"\n                    type=\"viewer\" >\n                    <Viewer />\n                </PrivateRoute>\n                <PrivateRoute path=\"/editor\"\n                    type=\"editor\" >\n                    <Editor />\n                </PrivateRoute>\n                <PrivateRoute path=\"/reviewer\"\n                    type=\"reviewer\" >\n                    <Reviewer />\n                </PrivateRoute>\n                <PrivateRoute path=\"/researcher\"\n                    type=\"researcher\" >\n                    <Researcher />\n                </PrivateRoute>\n\n            </Switch>\n            { user && <>\n            <Switch>\n                <PrivateRoute exact path={`/${user.type}/evaluation_metrics`} >\n                    <EvaluationMetrics />\n                </PrivateRoute>\n                <PrivateRoute path={`/${user.type}/evaluation_metrics/:id/view`} >\n                    <ViewEvaluationMetric />\n                </PrivateRoute>\n                <PrivateRoute path={`/${user.type}/evaluation_metrics/:id/edit`} >\n                    <EditEvaluationMetric />\n                </PrivateRoute>            \n\n                <PrivateRoute path={`/${user.type}/user/tokens`}>\n                    <UserTokens />\n                </PrivateRoute>\n\n            </Switch>\n            </>}\n            <Segment inverted attached='bottom'\n                className='footer'>\n                Juan Mo Journals\n            </Segment>\n        </>\n    );\n};\n\nexport default App;\n","import { LOGIN, LOGOUT } from '../types';\n\n\nconst initialState = {\n    email: null,\n    firstName: null,\n    lastName: null,\n    type: null\n};\nconst userReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case LOGIN:\n        return {\n            ...state,\n            ...action.payload,\n        }\n        case LOGOUT:\n        return {\n            ...state,\n            email: null,\n            firstName: null,\n            lastName: null,\n            type: null\n        }\n        default: return state\n    }\n};\n\nexport default userReducer;","import { combineReducers } from \"redux\";\nimport user from \"./user\";\n\nexport default combineReducers({ \n    user\n});\n","import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nimport rootReducer from './reducers'\n\nconst initalState = {\n\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(rootReducer, initalState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}